#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - VERSIONING                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  BOOT_STEP_VERSIONING: '1UL << 26'

display:
  - id: !extend disp1
    on_setup:
      then:
        - lambda: version_tft->update();

esphome:
  project:
    version: "${version}"

  on_boot:
    - priority: 600.01
      then:
        - script.execute:
            id: boot_log
            category: on_boot
            log_message: Publish firmware version
        - text_sensor.template.publish:
            id: version_esphome
            state: ${version}

script:
  - id: !extend boot_progress_dump
    then:
      - script.execute:
          id: boot_progress_dump_item
          step: ${BOOT_STEP_VERSIONING}
          step_name: Versioning

  - id: !extend boot_sequence
    then:
      - while:
          condition:
            - text_sensor.state:
                id: version_tft
                state: ''
            - lambda: return version_tft->state.empty();
          then:
            - logger.log: Updating TFT version
            - lambda: version_tft->update();
            - wait_until:
                condition:
                  - not:
                      - text_sensor.state:
                          id: version_tft
                          state: ''
                timeout: 10s

  - id: check_versions
    mode: restart
    then:
      - if:
          condition:
            - lambda: return !is_boot_step_completed(${BOOT_STEP_VERSIONING});
          then:
            - wait_until:
                condition:
                  - lambda: return version_tft->state == "${version}";
                  - lambda: return version_blueprint->state == "${version}";
                timeout: 90s
            - script.execute:
                id: boot_log
                category: Versions
                log_message: Reporting
            - if:
                condition:
                  - lambda: return version_tft->state == "${version}";
                  - lambda: return version_blueprint->state == "${version}";
                then:
                  - script.execute:
                      id: boot_progress
                      step: ${BOOT_STEP_VERSIONING}
                      step_name: Version
            - lambda: |-
                ESP_LOGD("script.check_versions", "Versions:");
                ESP_LOGD("script.check_versions", "  TFT:       %s", version_tft->state.c_str());
                ESP_LOGD("script.check_versions", "  ESPHome:   ${version}");
                if (version_tft->state != "${version}")
                  ESP_LOGE("script.check_versions", "TFT version mismatch!");
                ESP_LOGD("script.check_versions", "  Blueprint: %s", version_blueprint->state.c_str());
                if (version_blueprint->state != "${version}")
                  ESP_LOGE("script.check_versions", "Blueprint version mismatch!");
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: version
                  tft: !lambda return version_tft->state.c_str();
                  esphome: ${version}
                  blueprint: !lambda return version_blueprint->state.c_str();

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${project_tag}", "Blueprint:");
          if (!version_blueprint->state.empty())
            ESP_LOGCONFIG("${project_tag}", "  Version:     %s", version_blueprint->state.c_str());
          else
            ESP_LOGW("${project_tag}", "  Version:     UNKNOWN");

  - id: !extend page_boot
    then:
      - script.execute: page_boot_versions

  - id: page_boot_versions
    mode: restart
    then:
      - script.execute:
          id: boot_log
          category: Boot
          log_message: "ESPHome FW v${version}"
      - script.execute:
          id: set_component_text
          page: boot
          component: ver_firmware
          text: "Firmware: ${version}"
      - if:
          condition:
            - text_sensor.state:
                id: version_blueprint
                state: ''
          then:
            - script.execute:
                id: boot_log
                category: Boot
                log_message: Waiting for Blueprint version
      - wait_until:
          condition:
            - not:
                - text_sensor.state:
                    id: version_blueprint
                    state: ''
          timeout: 20s

  - id: !extend set_var_string
    then:
      - if:
          condition:
            - lambda: return component == "version_blueprint";
            - lambda: return not val.empty();
          then:
            - text_sensor.template.publish:
                id: version_blueprint
                state: !lambda return val.c_str();

  - id: !extend stop_all
    then:
      - lambda: |-
          check_versions->stop();
          page_boot_versions->stop();

text_sensor:
  - id: version_blueprint
    name: Version Blueprint
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      then:
        - script.execute: check_versions
        - if:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: boot
            then:
              - lambda: |-
                  disp1->set_component_text_printf("ver_blueprint", "Blueprint: %s", x.c_str());
        - lambda: |-
            ESP_LOGI("text_sensor.version_blueprint", "Blueprint version: %s", x.c_str());

  - id: version_esphome
    name: Version ESPHome
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    lambda: return {"${version}"};

  - id: version_tft
    name: Version TFT
    platform: nextion
    component_name: boot.version
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      then:
        - script.execute: check_versions
...
