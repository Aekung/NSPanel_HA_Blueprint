#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BUTTONS PAGES                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
api:
  id: !extend api_server
  actions:
    # Dynamically configures button properties on a specified page, enhancing UI interactivity by allowing updates to button appearance and behavior based on given parameters.
    - action: button  # yamllint disable-line rule:indentation
      variables:
        page: string       # Identifier of the page where the button is located.
        id: string         # Unique identifier for the button.
        state: bool        # Determines the button's state, influencing background and other visual aspects.
        icon: string       # Icon codepoint from HASwitchPlate Material Design Icons. Example: "\uE6E8" for mdi:lightbulb-on-outline.
        icon_color: int[]  # RGB color array for the icon.
        icon_font: int     # Nextion font identifier for the icon, default is 8.
        bri: string        # Brightness level or other dynamic info to be displayed close to the icon.
        label: string      # Main text label for the button.
      then:
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
              - lambda: return (page == current_page->state);
            then:
              - script.execute:
                  id: button_display
                  page: !lambda return page;
                  button_id: !lambda return id;
                  state: !lambda return state;
                  icon: !lambda return icon;
                  icon_color: !lambda return icon_color;
                  icon_font: !lambda return icon_font;
                  bri: !lambda return bri;
                  label: !lambda return label;

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", " - Page Buttons:         %s", is_boot_step_completed(BOOT_STEP_PAGE_BUTTONS) ? "Completed" : "PENDING");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(BOOT_STEP_PAGE_BUTTONS, "Page Buttons");

  - id: button_display
    mode: queued
    max_runs: 16
    parameters:
      page: string           # Identifier of the page where the button is located.
      button_id: string      # Unique identifier for the button.
      state: bool            # Determines the button's state, influencing background and other visual aspects.
      icon: string           # Icon codepoint from HASwitchPlate Material Design Icons. Example: "\uE6E8" for mdi:lightbulb-on-outline.
      icon_color: int32_t[]  # RGB color array for the icon.
      icon_font: int         # Nextion font identifier for the icon, default is 8.
      bri: string            # Brightness level or other dynamic info to be displayed close to the icon.
      label: string          # Main text label for the button.
    then:
      - wait_until:
          condition:
            or:
              - lambda: return (id(is_uploading_tft));
              - lambda: return (page != current_page->state);
              - and:
                  - lambda: return (disp1->queue_size() < 1);
                  - lambda: return (tf_uart->available() < 1);
          timeout: 50ms
      - if:
          condition:
            - lambda: return (!id(is_uploading_tft));
            - lambda: return (page == current_page->state);
          then:
            - wait_until:
                condition:
                  - lambda: return (disp1->queue_size() < 1);
                  - lambda: return (tf_uart->available() < 1);
                timeout: 50ms
            - lambda: |-
                disp1->set_component_picc((button_id + "pic").c_str(), state ? 47 : 46);
                disp1->set_component_picc((button_id + "bri").c_str(), state ? 47 : 46);
                disp1->set_component_picc((button_id + "text").c_str(), state ? 47 : 46);
                disp1->set_component_picc((button_id + "icon").c_str(), state ? 47 : 46);

                delay(5);
                App.feed_wdt();
                yield();

                disp1->set_component_font((button_id + "icon").c_str(), icon_font);
                disp1->set_component_foreground_color((button_id + "bri").c_str(), state ? 10597 : 65535);
                disp1->set_component_foreground_color((button_id + "text").c_str(), state ? 10597 : 65535);
                disp1->set_component_font_color((button_id + "icon").c_str(), rgbTo565(icon_color));

                delay(5);
                App.feed_wdt();
                yield();

                disp1->set_component_text((button_id + "icon").c_str(), icon.c_str());
                display_wrapped_text->execute(page.c_str(), (button_id + "text").c_str(), label.c_str(), 10);
                disp1->set_component_text((button_id + "bri").c_str(), (strcmp(bri.c_str(), "0") == 0) ? " " : bri.c_str());

                delay(5);
                App.feed_wdt();
                yield();

                set_component_visibility->execute(page.c_str(), (button_id + "pic").c_str(), true);
                set_component_visibility->execute(page.c_str(), (button_id + "icon").c_str(), true);
                set_component_visibility->execute(page.c_str(), (button_id + "text").c_str(), true);
                set_component_visibility->execute(page.c_str(), (button_id + "bri").c_str(), true);
                set_component_visibility->execute(page.c_str(), button_id.c_str(), true);

  - id: page_buttonpage
    mode: restart
    parameters:
      page_number: uint
    then:  # There's nothing here so far
  - id: page_buttonpage01
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 1
  - id: page_buttonpage02
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 2
  - id: page_buttonpage03
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 3
  - id: page_buttonpage04
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 4

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "buttonpage01") page_buttonpage01->execute();
          else if (current_page->state == "buttonpage02") page_buttonpage02->execute();
          else if (current_page->state == "buttonpage03") page_buttonpage03->execute();
          else if (current_page->state == "buttonpage04") page_buttonpage04->execute();

  - id: !extend stop_all
    then:
      - script.stop: button_display
      # - script.stop: page_buttonpage
      # - script.stop: page_buttonpage01
      # - script.stop: page_buttonpage02
      # - script.stop: page_buttonpage03
      # - script.stop: page_buttonpage04
...
