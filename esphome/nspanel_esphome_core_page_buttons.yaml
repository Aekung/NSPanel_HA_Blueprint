#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BUTTONS PAGES                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  BOOT_STEP_PAGE_BUTTONS: '1UL << 11'

api:
  actions:
    # Dynamically configures button properties on a specified page, enhancing UI interactivity by allowing updates to button appearance and behavior based on given parameters.
    - action: button  # yamllint disable-line rule:indentation
      variables:
        page: string          # Identifier of the page where the button is located.
        component_id: string  # Unique identifier for the button.
        state: bool           # Determines the button's state, influencing background and other visual aspects.
        icon: string          # Icon codepoint from HASwitchPlate Material Design Icons. Example: "\uE6E8" for mdi:lightbulb-on-outline.
        icon_color: int[]     # RGB color array for the icon.
        icon_font: int        # Nextion font identifier for the icon, default is 8.
        bri: string           # Brightness level or other dynamic info to be displayed close to the icon.
        label: string         # Main text label for the button.
      then:
        - wait_until:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: !lambda return page.c_str();
              - lambda: return (disp1->queue_size() < 1);
              - lambda: return (tf_uart->available() < 1);
            timeout: 50ms
        - if:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: !lambda return page.c_str();
            then:
              - lambda: |-
                  delay(10*disp1->queue_size()+tf_uart->available());
                  App.feed_wdt();
                  yield();

                  disp1->set_component_picc((component_id + "pic").c_str(), state ? 47 : 46);
                  disp1->set_component_picc((component_id + "bri").c_str(), state ? 47 : 46);
                  disp1->set_component_picc((component_id + "text").c_str(), state ? 47 : 46);
                  disp1->set_component_picc((component_id + "icon").c_str(), state ? 47 : 46);
              - script.execute:
                  id: set_component_font
                  component_id: !lambda return (component_id + "icon").c_str();
                  font: !lambda return icon_font;

              - lambda: |-
                  delay(10*disp1->queue_size()+tf_uart->available());
                  App.feed_wdt();
                  yield();

                  disp1->set_component_foreground_color((component_id + "bri").c_str(), state ? 10597 : 65535);
                  disp1->set_component_foreground_color((component_id + "text").c_str(), state ? 10597 : 65535);
                  disp1->set_component_font_color((component_id + "icon").c_str(),
                                                  (((icon_color[0] & 0xF8) << 8) | ((icon_color[1] & 0xFC) << 3) | (icon_color[2] >> 3)));

              - script.execute:
                  id: set_component_text
                  component_id: !lambda return (component_id + "icon").c_str();
                  text: !lambda return icon.c_str();
              - script.execute:
                  id: display_wrapped_text
                  page: !lambda return page.c_str();
                  component: !lambda return (component_id + "text").c_str();
                  text_to_display: !lambda return label.c_str();
                  line_length_limit: 10
              - script.execute:
                  id: set_component_text
                  component_id: !lambda return (component_id + "bri").c_str();
                  text: !lambda |-
                    return (strcmp(bri.c_str(), "0") == 0) ? " " : bri.c_str();
              - script.execute:
                  id: set_component_visibility
                  page: !lambda return page.c_str();
                  component_id: !lambda return (component_id + "pic").c_str();
                  show: true
              - script.execute:
                  id: set_component_visibility
                  page: !lambda return page.c_str();
                  component_id: !lambda return (component_id + "icon").c_str();
                  show: true
              - script.execute:
                  id: set_component_visibility
                  page: !lambda return page.c_str();
                  component_id: !lambda return (component_id + "text").c_str();
                  show: true
              - script.execute:
                  id: set_component_visibility
                  page: !lambda return page.c_str();
                  component_id: !lambda return (component_id + "bri").c_str();
                  show: true
              - script.execute:
                  id: set_component_visibility
                  page: !lambda return page.c_str();
                  component_id: !lambda return component_id.c_str();
                  show: true

script:
  - id: !extend boot_progress_dump
    then:
      - script.execute:
          id: boot_progress_dump_item
          step: ${BOOT_STEP_PAGE_BUTTONS}
          step_name: Page Buttons

  - id: !extend boot_sequence
    then:
      - script.execute:
          id: boot_progress
          step: ${BOOT_STEP_PAGE_BUTTONS}
          step_name: Page Buttons

  - id: page_buttonpage
    mode: restart
    parameters:
      page_number: uint
    then:  # There's nothing here so far
  - id: page_buttonpage01
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 1
  - id: page_buttonpage02
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 2
  - id: page_buttonpage03
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 3
  - id: page_buttonpage04
    mode: restart
    then:
      - script.execute:
          id: page_buttonpage
          page_number: 4

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "buttonpage01") page_buttonpage01->execute();
          else if (current_page->state == "buttonpage02") page_buttonpage02->execute();
          else if (current_page->state == "buttonpage03") page_buttonpage03->execute();
          else if (current_page->state == "buttonpage04") page_buttonpage04->execute();

  # - id: !extend stop_all
    # then:
      # - script.stop: page_buttonpage
      # - script.stop: page_buttonpage01
      # - script.stop: page_buttonpage02
      # - script.stop: page_buttonpage03
      # - script.stop: page_buttonpage04
...
