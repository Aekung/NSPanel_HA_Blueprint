#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
api:
  id: !extend api_server
  on_client_connected:
    then:
      - lambda: |-
          if (current_page->state == "boot") boot_log->execute("API", "Client connected");

display:
  - id: !extend disp1
    on_setup:
      - lambda: |-
          disp1->send_command("esphome=0");
      - script.execute:
          id: boot_log
          category: Nextion
          log_message: on_setup
      - if:
          condition:
            - lambda: return (!id(is_uploading_tft));
          then:
            - script.execute: boot_sequence
            - script.wait: boot_sequence
            - lambda: |-
                ESP_LOGI("display.on_setup", "Boot sequence completed.");
            - delay: 2s
            - lambda: |-
                nextion_init->publish_state(true);

    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    arch_restart();
                  }
                  break;
              }
            }

esphome:
  on_boot:
    - priority: 600.0  # This is where most sensors are set up.
      then:
        - lambda: |-
            boot_log->execute("on_boot", "Set time zone");
            set_timezone->execute(id(mui_timezone).c_str());
            boot_log->execute("on_boot", "Publish device name");
            device_name->publish_state("${name}");
            boot_log->execute("on_boot", "Reset notification entities");
            notification_label->publish_state("");
            notification_text->publish_state("");
            notification_unread->turn_off();
        - wait_until:
            condition:
              - lambda: return (not isnan(stoi(baud_rate->state)));
            timeout: 60s
        - lambda: |-
            boot_log->execute("on_boot", "Set baud rate");
            if (stoi(baud_rate->state) != tf_uart->get_baud_rate()) set_baud_rate->execute(stoi(baud_rate->state), true);
        - wait_until:
            condition:
              - lambda: return disp1->is_setup();
            timeout: 60s
        - if:
            condition:
              - lambda: return (not disp1->is_detected());
            then:
              - lambda: boot_log->execute("on_boot", "Restart Nextion");
              - switch.turn_off: screen_power
              - delay: 2s
              - switch.turn_on: screen_power

globals:
  - id: boot_progress_count
    type: uint8_t
    restore_value: false
    initial_value: '0'

script:
  - id: boot_event
    mode: restart
    then:
      - delay: 20s
      - while:
          condition:
            - lambda: return !is_boot_complete();
          then:
            - lambda: |-
                if (!is_boot_complete()) {
                  ESP_LOGW("script.boot_event", "Boot timed out");
                  esphome::api::CustomAPIDevice ha_event;
                  ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
                    {
                      {"device_name", device_name->state.c_str()},
                      {"esphome_version", "${version}"},
                      {"type", "boot"},
                      {"step", "timeout"}
                    });
                }
            - delay: 20s

  - id: boot_log
    mode: queued
    # max_runs: 15
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          ESP_LOGI("script.boot_log", "%s: %s", category.c_str(), log_message.c_str());
          if (current_page->state == "boot") {
            disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());
          }

  - id: boot_progress
    mode: restart
    parameters:
      step: uint32_t
    then:
      - script.execute: boot_progress_dump
      - lambda: |-
          complete_boot_step(step);
          ESP_LOGD("script.boot_progress", "Step %" PRIu32 " completed.", step);
          timer_reset_all->execute();
          if (is_boot_complete())
            ESP_LOGI("script.boot_progress", "Progress: Completed");
          else
            ESP_LOGI("script.boot_progress", "Progress: %" PRIu8 "/%" PRIu32 " (%" PRIu8 "%%)", get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
          if (current_page->state == "boot") {
            disp1->set_component_value("progress", get_boot_progress_percentage());
          }

  - id: boot_progress_dump
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", "Boot progress: %d%%", get_boot_progress_percentage());
          ESP_LOGCONFIG("script.boot_progress_dump", " - Boot:                 %s", is_boot_step_completed(BOOT_STEP_BOOT) ? "Completed" : "PENDING");

  - id: boot_sequence
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return api_server->is_connected();
          timeout: 60s
      - delay: 1s
      - lambda: |-
          ESP_LOGI("script.boot_sequence", "Starting boot sequence...");
          esphome::api::CustomAPIDevice ha_event;
          ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
            {
              {"device_name", device_name->state.c_str()},
              {"esphome_version", "${version}"},
              {"type", "boot"},
              {"step", "start"}
            });
          boot_log->execute("Boot", "Publish Nextion state");
          nextion_init->publish_state(disp1->is_setup());
          if (api_server->is_connected() and disp1->is_setup()) {
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
              {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "boot"},
                {"step", "nextion_init"}
              });
          }

  - id: !extend dump_config_report
    then:
      - lambda: |-
          // Report boot progress
          if (is_boot_complete()) {
            ESP_LOGCONFIG("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (100%%)", get_boot_steps_completed(), TOTAL_BOOT_STEPS);
          } else {
            ESP_LOGW("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (%" PRIu8 "%%)", get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
            ESP_LOGW("${project_tag}", "  State:       %s", ((wifi_component->is_connected()) and api_server->is_connected()) ? "Pending" : "DISCONNECTED");
            ESP_LOGCONFIG("${project_tag}", "Requesting new boot parameters from Blueprint");
            boot_event->execute();
          }

  - id: page_boot
    mode: single
    then:
      - logger.log: Page boot called
      - lambda: |-
          disp1->send_command("tm_esphome.en=0");
          disp1->send_command("esphome=0");
      - if:
          condition:
            - lambda: return true;  // !is_boot_step_completed(BOOT_STEP_BOOT);
          then:
            - lambda: |-
                boot_log->execute("Boot", "Starting sequence");
                set_brightness->execute(100);
                update_tft_info->execute();
                #ifdef ARDUINO
                boot_log->execute("Boot", "Framework is Arduino");
                disp1->set_component_text("sys_framework", "Framework: Arduino");
                #elif defined(USE_ESP_IDF)
                boot_log->execute("Boot", "Framework is ESP-IDF");
                disp1->set_component_text("sys_framework", "Framework: ESP-IDF");
                #endif
                if (!wifi_component->is_connected()) boot_log->execute("Boot", "Waiting for Wi-Fi...");
            - wait_until:
                condition:
                  - lambda: return (wifi_component->is_connected());
                timeout: 10s
            - if:
                condition:
                  - lambda: return (wifi_component->is_connected());
                then:  # Wi-Fi connected
                  - lambda: |-
                      if (!api_server->is_connected()) boot_log->execute("Boot", "Waiting for API...");
                  - wait_until:
                      condition:
                        - lambda: return (api_server->is_connected());
                      timeout: 10s
                  - if:
                      condition:
                        - lambda: return (api_server->is_connected());
                      then:  # API connected
                        - lambda: |-
                            boot_log->execute("Boot", "API connected");
            - lambda: |-
                boot_log->execute("Boot", "Display settings");
                disp1->send_command_printf("brightness_dim=%i", int(display_dim_brightness->state));
                disp1->set_component_value("settings.dimslider", int(display_dim_brightness->state));
            - delay: 100ms
            - lambda: |-
                boot_log->execute("Display settings", "Sleep rightness");
                disp1->send_command_printf("brightness_sleep=%i", int(display_sleep_brightness->state));
            - delay: 100ms
            - lambda: |-
                disp1->send_command_printf("brightness=%i", int(display_brightness->state));
                disp1->set_component_value("settings.brightslider", int(display_brightness->state));
                set_brightness->execute(display_brightness->state);
            - delay: 100ms
            - lambda: |-
                boot_log->execute("Boot", "Jump to wake-up page");
                ESP_LOGD("script.page_boot", "Jump to wake-up page: %s", wakeup_page_name->state.c_str());
                disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));
                goto_page->execute(wakeup_page_name->state.c_str());
                boot_progress->execute(BOOT_STEP_BOOT );
                boot_event->execute();
      - logger.log: Page boot constructed

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "boot") page_boot->execute();

  - id: !extend stop_all
    then:
      - script.stop: boot_log
      - script.stop: boot_event
      - script.stop: boot_progress
      - script.stop: page_boot
      - script.stop: update_tft_info

  - id: update_tft_info
    mode: restart
    then:
      - while:
          condition:
            - lambda: return version_tft->state.empty();
          then:
            - lambda: |-
                ESP_LOGD("script.update_tft_info", "Updating TFT version");
                version_tft->update();
            - wait_until:
                condition:
                  - lambda: return !(version_tft->state.empty());
                timeout: 10s
      - while:
          condition:
            - lambda: return isnan(display_mode->state);
          then:
            - lambda: |-
                ESP_LOGD("script.update_tft_info", "Updating TFT mode");
                display_mode->update();
            - wait_until:
                condition:
                  - lambda: return !isnan(display_mode->state);
                timeout: 10s
      - while:
          condition:
            - lambda: return isnan(display_charset->state);
          then:
            - lambda: |-
                ESP_LOGD("script.update_tft_info", "Updating TFT charset");
                display_charset->update();
            - wait_until:
                condition:
                  - lambda: return !isnan(display_charset->state);
                timeout: 10s

wifi:
  id: !extend wifi_component
  on_connect:
    then:
      - lambda: |-
          boot_log->execute("Wi-Fi", network::get_ip_addresses()[0].str().c_str());
          if (current_page->state == "boot") {
            disp1->set_component_text_printf("sys_ip", "IP: %s", network::get_ip_addresses()[0].str().c_str());
            set_brightness->execute(100);
          }
...
