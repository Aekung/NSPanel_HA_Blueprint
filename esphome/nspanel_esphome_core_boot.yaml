#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
api:
  id: !extend api_server
  on_client_connected:
    then:
      - lambda: |-
          if (current_page->state == "boot") boot_log->execute("API", "Client connected");

display:
  - id: !extend disp1
    on_setup:
      - lambda: |-
          disp1->send_command("esphome=0");
          set_brightness->execute(100);
          nextion_init->publish_state(disp1->is_setup());

    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    arch_restart();
                  }
                  break;
              }
            }

esphome:
  on_boot:
    - priority: 500
      then:
        - script.execute: boot_sequence
        - script.wait: boot_sequence
        - lambda: |-
            boot_log->execute("Boot", "Jump to wake-up page");
        - wait_until:
            condition:
              - lambda: return (disp1->queue_size() < 1);
              - lambda: return (tf_uart->available() < 1);
        - lambda: |-
            ESP_LOGD("esphome.on_boot", "Jump to wake-up page: %s", wakeup_page_name->state.c_str());
            delay(10*disp1->queue_size()+tf_uart->available());
            goto_page->execute(wakeup_page_name->state.c_str());
            delay(10*disp1->queue_size()+tf_uart->available());
            disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));

script:
  - id: boot_event
    mode: restart
    then:
      - delay: 120s
      - while:
          condition:
            - lambda: return !is_boot_complete();
          then:
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: boot
                  step: timeout
            - delay: 20s

  - id: boot_log
    mode: queued
    # max_runs: 15
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          ESP_LOGI("script.boot_log", "%s: %s", category.c_str(), log_message.c_str());
          if (current_page->state == "boot") {
            disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());
          }

  - id: boot_progress
    mode: restart
    parameters:
      step: BootStepType
      step_name: string
    then:
      - script.execute: boot_progress_dump
      - lambda: |-
          complete_boot_step(step);
          ESP_LOGI("script.boot_progress", "Boot step completed: %s (step %" PRIu8 " of %" PRIu8 " - %" PRIu8 "%%)",
                    step_name.c_str(), get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
          if (is_boot_complete())
            ESP_LOGI("script.boot_progress", "Progress: Boot sequence completed");
          if (current_page->state == "boot") {
            disp1->set_component_value("progress", get_boot_progress_percentage());
          }

  - id: boot_progress_dump
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", "Boot progress: %d%%", get_boot_progress_percentage());
          ESP_LOGCONFIG("script.boot_progress_dump", " - Boot:                 %s", is_boot_step_completed(BOOT_STEP_BOOT) ? "Completed" : "PENDING");

  - id: boot_sequence
    mode: single
    then:
      - lambda: |-
          if (!disp1->is_setup()) boot_log->execute("Boot", "Waiting for Nextion");
      - wait_until:
          condition:
            - lambda: return disp1->is_setup();
          timeout: 10s
      - lambda: |-
          if (!wifi_component->is_connected()) boot_log->execute("Boot", "Waiting for Wi-Fi");
      - wait_until:
          condition:
            - lambda: return wifi_component->is_connected();
          timeout: 10s
      - lambda: |-
          if (!api_server->is_connected()) boot_log->execute("Boot", "Waiting for API");
      - wait_until:
          condition:
            - lambda: return api_server->is_connected();
          timeout: 10s
      - delay: 2s
      - lambda: |-
          boot_log->execute("Boot", "Report to Blueprint");
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: boot
            step: start
      - lambda: |-
          boot_log->execute("Boot", "Display settings");
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->send_command_printf("brightness_dim=%i", int(display_dim_brightness->state));
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->set_component_value("settings.dimslider", int(display_dim_brightness->state));
      - delay: 100ms
      - lambda: |-
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->send_command_printf("brightness_sleep=%i", int(display_sleep_brightness->state));
      - delay: 100ms
      - lambda: |-
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->send_command_printf("brightness=%i", int(display_brightness->state));
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->set_component_value("settings.brightslider", int(display_brightness->state));
          delay(10*disp1->queue_size()+tf_uart->available());
          set_brightness->execute(display_brightness->state);
          boot_progress->execute(BOOT_STEP_BOOT, "Boot");
          boot_event->execute();

  - id: !extend dump_config_report
    then:
      - lambda: |-
          // Report boot progress
          if (is_boot_complete()) {
            ESP_LOGCONFIG("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (100%%)", get_boot_steps_completed(), TOTAL_BOOT_STEPS);
          } else {
            ESP_LOGW("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (%" PRIu8 "%%)", get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
            ESP_LOGW("${project_tag}", "  State:       %s", ((wifi_component->is_connected()) and api_server->is_connected()) ? "Pending" : "DISCONNECTED");
            ESP_LOGCONFIG("${project_tag}", "Requesting new boot parameters from Blueprint");
            boot_event->execute();
          }

  - id: page_boot
    mode: single
    then:
      - logger.log: Page boot called
      - script.execute: page_boot_exit
      - lambda: |-
          disp1->send_command("tm_esphome.en=0");
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->send_command("esphome=0");
          delay(10*disp1->queue_size()+tf_uart->available());
          #ifdef ARDUINO
          disp1->set_component_text("sys_framework", "Framework: Arduino");
          #elif defined(USE_ESP_IDF)
          disp1->set_component_text("sys_framework", "Framework: ESP-IDF");
          #endif

  - id: page_boot_exit
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return (current_page->state != "boot");
          timeout: 180s
      - if:
          condition:
            - lambda: return (current_page->state == "boot");
          then:
            - wait_until:
                condition:
                  - lambda: return (disp1->queue_size() < 1);
                  - lambda: return (tf_uart->available() < 1);
            - if:
                condition:
                  - lambda: return (current_page->state == "boot");
                then:
                  - lambda: |-
                      ESP_LOGD("script.page_boot_exit", "Jump to wake-up page: %s", wakeup_page_name->state.c_str());
                      delay(10*disp1->queue_size()+tf_uart->available());
                      goto_page->execute(wakeup_page_name->state.c_str());
                      delay(10*disp1->queue_size()+tf_uart->available());
                      disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "boot") page_boot->execute();

  - id: !extend stop_all
    then:
      - script.stop: boot_log
      - script.stop: boot_event
      - script.stop: boot_progress
      - script.stop: page_boot
      - script.stop: page_boot_exit
...
