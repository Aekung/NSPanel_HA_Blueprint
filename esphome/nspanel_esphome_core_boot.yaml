#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_BOOT: '1UL << 1'

api:
  id: !extend api_service
  on_client_connected:
    then:
      - script.execute:
          id: boot_log
          category: API
          log_message: Client connected

display:
  - id: !extend disp1
    on_setup:
      then:
        - script.execute:
            id: send_command
            cmd: 'esphome=0'
        - script.execute:
            id: set_brightness
            brightness: 100
        - binary_sensor.template.publish:
            id: nextion_init
            state: !lambda return disp1->is_setup();

    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    arch_restart();
                  }
                  break;
              }
            }

esphome:
  on_boot:
    - priority: 500
      then:
        - script.execute: boot_sequence
        - script.wait: boot_sequence
        - script.execute:
            id: boot_log
            category: Boot
            log_message: Jump to wake-up page
        - delay: !lambda return (10*disp1->queue_size()+tf_uart->available());
        - script.execute:
            id: goto_page
            page: !lambda return wakeup_page_name->state;
        - script.execute:
            id: set_variable_value
            variable: wakeup_page_id
            val: !lambda return get_page_id(wakeup_page_name->state.c_str());

script:
  - id: boot_event
    mode: restart
    then:
      - delay: 120s
      - while:
          condition:
            - lambda: return not is_boot_complete();
          then:
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: boot
                  step: timeout
            - delay: 120s

  - id: boot_log
    mode: queued
    # max_runs: 15
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          ESP_LOGI("script.boot_log", "%s: %s", category.c_str(), log_message.c_str());
      - if:
          condition:
            - text_sensor.state:
                id: current_page
                state: boot
          then:
            - delay: !lambda return (10*disp1->queue_size()+tf_uart->available());
            - lambda: |-
                disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());

  - id: boot_progress
    mode: restart
    parameters:
      step: uint32_t
      step_name: string
    then:
      - script.execute: boot_progress_dump
      - lambda: |-
          ESP_LOGI("script.boot_progress", "Boot step completed: %s (step %i of %i - %i%%)", step_name.c_str(),
                    get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
      - if:
          condition:
            - lambda: return is_boot_complete();
          then:
            - logger.log:
                format: "Progress: Boot sequence completed"
                level: INFO
      - if:
          condition:
            - text_sensor.state:
                id: current_page
                state: boot
          then:
            - script.execute:
                id: set_component_value
                page: boot
                component: progress
                val: !lambda return get_boot_progress_percentage();

  - id: boot_progress_dump
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return get_boot_progress_percentage() == 100;
          timeout: 60s
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", "Boot progress: %d%%", get_boot_progress_percentage());
      - script.execute:
          id: boot_progress_dump_item
          step: ${BOOT_STEP_BOOT}
          step_name: Boot

  - id: boot_progress_dump_item
    mode: queued
    parameters:
      step: uint32_t
      step_name: string
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", " - %s:%s", step_name.c_str(),
                        is_boot_step_completed(step) ? "Completed" : "PENDING");
      #- lambda: |-
      #    int8_t padding = std::max(0, 21 - static_cast<int>(step_name.length())); // Calculate dynamic padding
      #    ESP_LOGCONFIG("script.boot_progress_dump", " - %s:%*s%s", step_name.c_str(), padding, "",
      #                  is_boot_step_completed(step) ? "Completed" : "PENDING");

  - id: boot_sequence
    mode: single
    then:
      - if:
          condition:
            - lambda: return not disp1->is_setup();
          then:
            - script.execute:
                id: boot_log
                category: Boot
                log_message: Waiting for Nextion
      - wait_until:
          condition:
            - lambda: return disp1->is_setup();
          timeout: 10s
      - if:
          condition:
            - not:
                - wifi.connected:
          then:
            - script.execute:
                id: boot_log
                category: Boot
                log_message: Waiting for Wi-Fi
      - wait_until:
          condition:
            - wifi.connected:
          timeout: 10s
      - if:
          condition:
            - not:
                - api.connected:
          then:
            - script.execute:
                id: boot_log
                category: Boot
                log_message: Waiting for API
      - wait_until:
          condition:
            - api.connected:
          timeout: 10s
      - delay: 2s
      - script.execute:
          id: boot_log
          category: Boot
          log_message: Report to Blueprint
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: boot
            step: start
      - script.execute:
          id: boot_log
          category: Boot
          log_message: Display settings
      - lambda: |-
          set_variable_value->execute("brightness_dim", int(display_dim_brightness->state));
          set_variable_value->execute("brightness_sleep", int(display_sleep_brightness->state));
          set_variable_value->execute("brightness", int(display_brightness->state));
          set_component_value->execute("settings", "dimslider", int(display_dim_brightness->state));
          set_component_value->execute("settings", "brightslider", int(display_brightness->state));
          set_brightness->execute(display_brightness->state);
          boot_progress->execute(${BOOT_STEP_BOOT}, "Boot");
          boot_event->execute();

  - id: !extend dump_config
    then:
      - lambda: |-
          if (is_boot_complete())
            ESP_LOGCONFIG("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (100%%)",
                          get_boot_steps_completed(), TOTAL_BOOT_STEPS);
          else {
            ESP_LOGW("${project_tag}", "  Boot steps:  %" PRIu8 "/%" PRIu8 " (%" PRIu8 "%%)",
                      get_boot_steps_completed(), TOTAL_BOOT_STEPS, get_boot_progress_percentage());
            ESP_LOGW("${project_tag}", "  State:       %s",
                      ((wifi_component->is_connected()) and api_server->is_connected()) ? "Pending" : "DISCONNECTED");
            ESP_LOGCONFIG("${project_tag}", "Requesting new boot parameters from Blueprint");
            boot_event->execute();
          }

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "boot")
            page_boot->execute();

  - id: !extend stop_all
    then:
      - lambda: |-
          boot_log->stop();
          boot_event->stop();
          boot_progress->stop();
...
