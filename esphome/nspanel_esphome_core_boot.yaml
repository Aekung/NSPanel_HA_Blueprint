#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
api:
  id: !extend api_server
  on_client_connected:
    then:
      - lambda: |-
          if (current_page->state == "boot") boot_log->execute("API", "Client connected");

  actions:
    # Transfers global settings from the blueprint to ESPHome, configuring the necessary parameters for optimal operation.
    - action: init_global
      variables:
        blueprint_version: string      # Version of the blueprint in use.
        ent_value_xcen: int            # Alignment of values on entities pages (0 for right (default), 1 for center or 2 for left).
        mui_please_confirm: string     # Localized message for confirmation prompts.
        mui_unavailable: string        # Localized message indicating unavailability.
        screensaver_time: bool         # Toggles the screensaver time display.
        screensaver_time_font: int     # Specifies the font id for the screensaver time display.
        screensaver_time_color: int[]  # RGB color for the screensaver time display, e.g., [165, 42, 42] for reddish-brown.
        decimal_separator: string      # The char to be used as decimal separator.
      then:
        - script.execute:
            id: boot_log
            category: Action
            log_message: init_global
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
            then:
              - script.execute:
                  id: global_settings
                  blueprint_version: !lambda return blueprint_version;
                  ent_value_xcen: !lambda return ent_value_xcen;
                  mui_please_confirm: !lambda return mui_please_confirm;
                  mui_unavailable: !lambda return mui_unavailable;
                  screensaver_time: !lambda return screensaver_time;
                  screensaver_time_font: !lambda return screensaver_time_font;
                  screensaver_time_color: !lambda return screensaver_time_color;
                  decimal_separator: !lambda return decimal_separator;
              - script.wait: global_settings
              - lambda: blueprint_status->publish_state(int(blueprint_status->raw_state) | (1 << 5));

    # Configures NSPanel hardware (buttons, relays, etc.) settings
    - action: init_hardware
      variables:
        relay1_local_control: bool              # Enable/disable local control for Relay 1.
        relay1_icon: string                     # Icon for Relay 1 (e.g., "\uE3A5" for mdi:numeric-1-box-outline).
        relay1_icon_color: int[]                # RGB color array for Relay 1's icon.
        relay1_fallback: bool                   # Fallback state for Relay 1 in case of communication loss.
        relay2_local_control: bool              # Enable/disable local control for Relay 2.
        relay2_icon: string                     # Icon for Relay 2 (e.g., "\uE3A8" for mdi:numeric-2-box-outline).
        relay2_icon_color: int[]                # RGB color array for Relay 2's icon.
        relay2_fallback: bool                   # Fallback state for Relay 2 in case of communication loss.
        button_left: bool                       # Enable/disable left button status visualization.
        button_right: bool                      # Enable/disable right button status visualization.
        button_bar_pages: int                   # As uint representing the list of pages where the buttons bars will be visible
        button_bar_color_on: int[]              # RGB color array for the hardware button bar when the status is `On`.
        button_bar_color_off: int[]             # RGB color array for the hardware button bar when the status is `Off`.
        embedded_climate: bool                  # Indicates if climate control is integrated.
        embedded_climate_friendly_name: string  # Friendly name for the climate control feature.
        embedded_indoor_temperature: bool       # Enables indoor temperature display.
      then:
        - script.execute:
            id: boot_log
            category: Action
            log_message: init_hardware
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
            then:
              - script.execute:
                  id: init_hardware_climate
                  embedded_climate: !lambda return embedded_climate;
                  embedded_climate_friendly_name: !lambda return embedded_climate_friendly_name;
                  embedded_indoor_temperature: !lambda return embedded_indoor_temperature;

              - lambda: |-
                  if (!id(is_uploading_tft)) {
                    using namespace esphome::display;
                    // Relay settings
                    update_bitwise_setting(id(relay_settings), relay1_local_control, RelaySettings::Relay1_Local);
                    update_bitwise_setting(id(relay_settings), relay1_fallback, RelaySettings::Relay1_Fallback);
                    update_bitwise_setting(id(relay_settings), relay2_local_control, RelaySettings::Relay2_Local);
                    update_bitwise_setting(id(relay_settings), relay2_fallback, RelaySettings::Relay2_Fallback);

                    // Relay icons
                    if (not relay1_icon.empty()) copyStringToCharArray(id(home_relay1_icon), relay1_icon);
                    if (not relay2_icon.empty()) copyStringToCharArray(id(home_relay2_icon), relay2_icon);

                    // Relay icon's colors
                    if (relay1_icon_color.size() == 3) {
                      id(home_relay1_icon_color) = rgbTo565(relay1_icon_color);
                      disp1->set_component_font_color("home.chip_relay1", id(home_relay1_icon_color));
                    }
                    if (relay2_icon_color.size() == 3) {
                      id(home_relay2_icon_color) = rgbTo565(relay2_icon_color);
                      disp1->set_component_font_color("home.chip_relay2", id(home_relay2_icon_color));
                    }

                    // Buttons bars settings
                    id(buttons_bars_pages) = button_bar_pages;
                    update_bitwise_setting(id(buttons_settings), button_left, ButtonSettings::ButtonLeft_Enabled);
                    update_bitwise_setting(id(buttons_settings), button_right, ButtonSettings::ButtonRight_Enabled);

                    if (button_bar_color_on.size() == 3)
                      id(buttons_color_on) = rgbTo565(button_bar_color_on);
                    if (button_bar_color_off.size() == 3)
                      id(buttons_color_off) = rgbTo565(button_bar_color_off);

                    // Refresh relays display
                    refresh_relays->execute(3);
                    refresh_hardware_buttons_bars->execute(3);
                  }
                  blueprint_status->publish_state(int(blueprint_status->raw_state) | (1 << 4));

    # Sets up the "Home" page in ESPHome with customized settings and UI elements as defined in the project blueprint.
    - action: init_page_home
      variables:
        date_color: int[]                      # RGB color array for the date display.
        time_format: string                    # Time display format string, utilizing standard formatting symbols.
        time_color: int[]                      # RGB color array for the time display.
        meridiem: string[]                     # Optional array for AM/PM labels if included in time format.
        chip_font: int                         # Font Id for chip icons displayed on the "Home" page.
        custom_buttons_font: int               # Font Id for icons on custom buttons.
        qrcode: bool                           # Enable/disable flag for QR code button display.
        qrcode_icon: string                    # Icon codepoint for QR code button, sourced from HASwitchPlate Material Design Icons.
        qrcode_icon_color: int[]               # RGB color array for QR code button icon.
        entities_pages_icon: string            # Icon codepoint for entities page button, sourced from HASwitchPlate Material Design Icons.
        entities_pages_icon_color: int[]       # RGB color array for entities page button icon.
        utilities: bool                        # Enable/disable flag for utilities page button display.
        utilities_icon: string                 # Icon codepoint for utilities page button, sourced from HASwitchPlate Material Design Icons.
        utilities_icon_color: int[]            # RGB color array for utilities page button icon.
        outdoor_temp_font: int                 # Font Id for outdoor temperature indication on the "Home" page.
      then:
        - script.execute:
            id: boot_log
            category: Action
            log_message: init_page_home
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
            then:
              - lambda: |-
                  // using namespace esphome::display;
                  // Localization
                  id(mui_time_format) = time_format;
                  if (meridiem.size() == 2) {
                    id(mui_meridiem)[0] = meridiem[0];
                    id(mui_meridiem)[1] = meridiem[1];
                  }

                  // Date/Time colors
                  id(home_date_color) = rgbTo565(date_color);
                  id(home_time_color) = rgbTo565(time_color);
                  disp1->set_component_font_color("home.date", id(home_date_color));
                  disp1->set_component_font_color("home.time", id(home_time_color));
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Chips icon size
                  disp1->set_component_font("home.chip_relay1", chip_font);
                  disp1->set_component_font("home.chip_relay2", chip_font);
                  disp1->set_component_font("home.chip_climate", chip_font);
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  for (int i = 1; i <= 7; ++i) {
                    disp1->send_command_printf("home.chip%02d.font=%" PRIi32, i, chip_font);
                  }
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  disp1->set_component_font("home.wifi_icon", chip_font);
                  id(home_chip_font_id) = chip_font;

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Custom buttons icon size
                  id(home_custom_buttons_font_id) = custom_buttons_font;
                  for (int i = 1; i <= 7; ++i) {
                    disp1->send_command_printf("home.button%02d.font=%" PRIu8, i, id(home_custom_buttons_font_id));
                  }
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
                  disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
                  disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Outdoor temperature font size
                  disp1->set_component_font("home.outdoor_temp", outdoor_temp_font);

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // QRCode button
                  set_component_visibility->execute("home.bt_qrcode", qrcode);
                  disp1->set_component_text("home.bt_qrcode", qrcode_icon.c_str());
                  disp1->set_component_font_color("home.bt_qrcode", rgbTo565(qrcode_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Entities pages button
                  disp1->set_component_text("home.bt_entities", entities_pages_icon.c_str());
                  disp1->set_component_font_color("home.bt_entities", rgbTo565(entities_pages_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Utilities button
                  disp1->send_command_printf("is_utilities=%i", utilities ? 1 : 0);
                  disp1->set_component_text("home.bt_utilities", utilities_icon.c_str());
                  disp1->set_component_font_color("home.bt_utilities", rgbTo565(utilities_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  blueprint_status->publish_state(int(blueprint_status->raw_state) | (1 << 1));

    # Populates the "Settings" page with user-configurable options, aligning with the project's blueprint for a cohesive and intuitive settings interface.
    - action: init_page_settings
      variables:
        reboot: string      # Label for the reboot button, directing users on restarting the device.
        brightness: string  # Caption for brightness adjustment controls.
        bright: string      # Text label for the high brightness level slider, signaling a brighter screen option.
        dim: string         # Text label for the dim brightness level slider, signaling a lower light option for energy saving.
      then:
        - script.execute:
            id: boot_log
            category: Action
            log_message: init_page_settings
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
            then:
              - lambda: |-
                  if (not reboot.empty()) disp1->set_component_text_printf("settings.lbl_reboot", " %s", reboot.c_str());
                  disp1->set_component_text_printf("settings.lbl_brightness", " %s", brightness.c_str());
                  display_wrapped_text->execute("settings", "lbl_bright", bright.c_str(), display_mode->state == 2 ? 25 : 10);
                  display_wrapped_text->execute("settings", "lbl_dim", dim.c_str(), display_mode->state == 2 ? 25 : 10);
                  blueprint_status->publish_state(int(blueprint_status->raw_state) | (1 << 3));

display:
  - id: !extend disp1
    on_setup:
      - script.execute:
          id: boot_log
          category: Nextion
          log_message: on_setup
      - if:
          condition:
            - lambda: return (!id(is_uploading_tft));
          then:
            - delay: 1s
            - lambda: nextion_init->publish_state(true);
    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    arch_restart();
                  }
                  break;
              }
            }

esphome:
  on_boot:
    - priority: 600.0  # This is where most sensors are set up.
      then:
        - lambda: |-
            boot_log->execute("on_boot", "Set time zone");
            set_timezone->execute(id(mui_timezone).c_str());
            boot_log->execute("on_boot", "Publish Blueprint progress (0)");
            if (isnan(blueprint_status->raw_state)) blueprint_status->publish_state(0);
            boot_log->execute("on_boot", "Publish device name");
            device_name->publish_state("${name}");
            boot_log->execute("on_boot", "Reset notification entities");
            notification_label->publish_state("");
            notification_text->publish_state("");
            notification_unread->turn_off();
        - wait_until:
            condition:
              - lambda: return (not isnan(stoi(baud_rate->state)));
            timeout: 60s
        - lambda: |-
            boot_log->execute("on_boot", "Set baud rate");
            if (stoi(baud_rate->state) != tf_uart->get_baud_rate()) set_baud_rate->execute(stoi(baud_rate->state), true);
        - wait_until:
            condition:
              - lambda: return disp1->is_setup();
            timeout: 60s
        - if:
            condition:
              - lambda: return (not disp1->is_detected());
            then:
              - lambda: boot_log->execute("on_boot", "Restart Nextion");
              - switch.turn_off: screen_power
              - delay: 2s
              - switch.turn_on: screen_power

script:
  - id: boot_log
    mode: parallel
    max_runs: 100
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          static const char *const TAG = "script.boot_log";
          ESP_LOGI(TAG, log_message.c_str());
          if (current_page->state == "boot") {
            disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());
          }

  - id: boot_event
    mode: restart
    parameters:
      init: bool
    then:
      - lambda: |-
          if (init) {
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
              {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "boot"},
                {"step", "start"}
              });
          }
      - while:
          condition:
            - lambda: return (blueprint_status->state < 99);
          then:
            - delay: 10s
            - lambda: |-
                if (blueprint_status->state < 99) {
                  esphome::api::CustomAPIDevice ha_event;
                  ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
                    {
                      {"device_name", device_name->state.c_str()},
                      {"esphome_version", "${version}"},
                      {"type", "boot"},
                      {"step", "timeout"}
                    });
                }

  - id: boot_progress
    mode: restart
    parameters:
      step: uint
    then:
      - lambda: |-
          timer_reset_all->execute();
          if (step == 10) {
            ESP_LOGI("script.boot_progress", "Progress: Completed");
            disp1->set_component_value("boot.progress", 100);
          } else {
            step = std::min(100, int(round((blueprint_status->state + (step*10))/2)));
            ESP_LOGI("script.boot_progress", "Progress: %i%%", step);
            disp1->set_component_value("boot.progress", step);
          }
          if (current_page->state == "boot" and !isnan(display_charset->state) and !isnan(display_mode->state) and !version_tft->state.empty())
            disp1->send_command("tm_esphome.en=0");

  - id: global_settings
    mode: restart
    parameters:
      blueprint_version: string
      ent_value_xcen: int
      mui_please_confirm: string
      mui_unavailable: string
      screensaver_time: bool
      screensaver_time_font: int
      screensaver_time_color: int32_t[]
      decimal_separator: string
    then:
      - lambda: |-
          if (!id(is_uploading_tft)) {
            // Blueprint version
            boot_log->execute("Blueprint", "Global settings");
            version_blueprint->publish_state(blueprint_version.c_str());
            disp1->set_component_text_printf("ver_blueprint", "Blueprint: %s", blueprint_version.c_str());
            check_versions->execute();

            // MUI strings
            id(mui_please_confirm_global) = mui_please_confirm;
            id(mui_unavailable_global) = mui_unavailable;

            // Screen saver page (sleep)
            id(screensaver_display_time) = screensaver_time;
            id(screensaver_display_time_font) = screensaver_time_font;
            id(screensaver_display_time_color) = rgbTo565(screensaver_time_color);
            page_screensaver->execute();

            // Entities pages alignment
            id(page_entity_value_horizontal_alignment) = ent_value_xcen;

            // Decimal separator
            if (not decimal_separator.empty()) id(mui_decimal_separator) = decimal_separator[0];

            if (current_page->state != "boot") {
              // Update current page
              page_changed->execute();
            }
          }

  - id: page_boot
    mode: single
    then:
      - logger.log: Page boot called
      - lambda: |-
          boot_log->execute("Boot", "Starting sequence");
          boot_progress->execute(0);
          set_brightness->execute(100);
          update_tft_info->execute();
          boot_log->execute("Boot", "ESPHome FW v${version}");
          disp1->set_component_text("ver_firmware", "Firmware: ${version}");  // ESPHome version
          boot_progress->execute(1);
          #ifdef ARDUINO
          boot_log->execute("Boot", "Framework is Arduino");
          disp1->set_component_text("sys_framework", "Framework: Arduino");
          #elif defined(USE_ESP_IDF)
          boot_log->execute("Boot", "Framework is ESP-IDF");
          disp1->set_component_text("sys_framework", "Framework: ESP-IDF");
          #endif
          boot_progress->execute(2);
          boot_log->execute("Boot", "Waiting for Wi-Fi...");
      - wait_until:
          condition:
            - lambda: return (wifi_component->is_connected());
          timeout: 10s
      - if:
          condition:
            - lambda: return (wifi_component->is_connected());
          then:  # Wi-Fi connected
            - lambda: |-
                boot_log->execute("Boot", "Wi-Fi connected");
                boot_progress->execute(3);
                if (current_page->state == "boot") {
                  #if ESPHOME_VERSION_CODE < VERSION_CODE(2024, 3, 0)  // Code for ESPHome earlier than v2024.3.0
                  disp1->set_component_text_printf("sys_ip", "IP: %s", network::get_ip_address().str().c_str());
                  #else  // Code for ESPHome v2024.3.0 or newer
                  disp1->set_component_text_printf("sys_ip", "IP: %s", network::get_ip_addresses()[0].str().c_str());
                  #endif  // ESPHome version based code
                  set_brightness->execute(100);
                }
                boot_log->execute("Boot", "Waiting for API...");
            - wait_until:
                condition:
                  - lambda: return (api_server->is_connected());
                timeout: 10s
            - if:
                condition:
                  - lambda: return (api_server->is_connected());
                then:  # API connected
                  - lambda: |-
                      boot_log->execute("Boot", "API connected");
                      boot_progress->execute(4);
                      if (blueprint_status->state <= 99) boot_event->execute(true);
      - lambda: |-
          boot_log->execute("Boot", "Waiting for Blueprint...");
      - wait_until:
          condition:
            - lambda: return (wifi_component->is_connected() and api_server->is_connected() and blueprint_status->state > 99);
          timeout: 5s
      - lambda: |-
          boot_progress->execute(5);
          boot_log->execute("Boot", "Sending display settings");
          disp1->send_command_printf("brightness=%i", int(display_brightness->state));
          disp1->set_component_value("settings.brightslider", int(display_brightness->state));
          disp1->send_command_printf("brightness_dim=%i", int(display_dim_brightness->state));
          disp1->set_component_value("settings.dimslider", int(display_dim_brightness->state));
          disp1->send_command_printf("brightness_sleep=%i", int(display_sleep_brightness->state));
          disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));
          boot_progress->execute(6);
          boot_log->execute("Boot", "Publish Nextion state");
          nextion_init->publish_state(disp1->is_setup());
          if (api_server->is_connected() and disp1->is_setup()) {
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
              {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "boot"},
                {"step", "nextion_init"}
              });
          }
          boot_progress->execute(7);
          boot_log->execute("Boot", "Set Home page elements");
          // Chips icon size
          for (int i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.chip%02d.font=%i", i, id(home_chip_font_id));
          }
          // Custom buttons icon size
          for (int i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.button%02d.font=%i", i, id(home_custom_buttons_font_id));
          }
          disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.wifi_icon", id(home_chip_font_id));
          disp1->set_component_font_color("home.chip_relay1", id(home_relay1_icon_color));
          disp1->set_component_font_color("home.chip_relay2", id(home_relay2_icon_color));
          #if defined(USE_ESP32_BLE_SERVER) || defined(USE_ESP32_BLE_CLIENT) || defined(USE_BLUETOOTH_PROXY) || defined(USE_IMPROV)
          disp1->set_component_text("home.bt_icon", "\uE0AE");
          #endif
          boot_progress->execute(8);
          boot_log->execute("Boot", "Wait to finish");
      - wait_until:
          condition:
            - lambda: return (wifi_component->is_connected() and api_server->is_connected() and blueprint_status->state > 99);
          timeout: 10s
      - lambda: boot_progress->execute(9);
      - delay: 5s
      - lambda: boot_progress->execute(10);
      - delay: 1s
      - lambda: |-
          set_brightness->execute(display_brightness->state);
          boot_log->execute("Boot", "Jump to wake-up page");
          ESP_LOGD("script.page_boot", "Jump to wake-up page: %s", wakeup_page_name->state.c_str());
          goto_page->execute(wakeup_page_name->state.c_str());

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state.empty() or current_page->state == "boot") page_boot->execute();

  - id: !extend stop_all
    then:
      - script.stop: boot_log
      - script.stop: boot_event
      - script.stop: boot_progress
      - script.stop: global_settings
      - script.stop: page_boot

sensor:
  ##### Blueprint status #####
  # Bit # Settings step        #
  #  0  # reserved             #
  #  1  # page_home            #
  #  2  # qrcode               #
  #  3  # page_settings        #
  #  4  # relay_settings       #
  #  5  # global_settings      #
  #  6  # reserved             #
  #  7  # reserved             #
  ##############################
  - id: blueprint_status
    name: Blueprint
    platform: template
    unit_of_measurement: "%"
    accuracy_decimals: 1
    entity_category: diagnostic
    icon: mdi:link-variant
    internal: false
    disabled_by_default: false
    filters:
      - lambda: |-
          if (!isnan(x) and x>0)
            return (x / 62) * 100.0f;
          else
            return 0;
    on_value:
      then:
        - script.execute: refresh_wifi_icon
...
