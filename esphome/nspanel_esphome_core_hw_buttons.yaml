#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - BUTTONS                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  invalid_cooldown: "100ms"
  buttons_color_on: "7519"
  buttons_color_off: "10597"
  ##############################

api:
  id: !extend api_server
  actions:
    # Hardware Button State Indication action
    - action: hw_button_state
      variables:
        button_mask: int  # Bitwise value for buttons: 1 for "left button", 2 for "right button", 3 for both buttons
        state: bool       # State for the button(s) indication: true for active, false for inactive
      then:
        - lambda: |-
            // Updates the visual state indication for hardware buttons
            // Use bitwise AND to check specific bits
            if (button_mask & 1) // Checks if the least significant bit is set (left button)
              update_bitwise_setting(id(buttons_settings), state, ButtonSettings::ButtonLeft_State);
            if (button_mask & 2) // Checks if the second least significant bit is set (right button)
              update_bitwise_setting(id(buttons_settings), state, ButtonSettings::ButtonRight_State);
            // Refreshes the indication bars on the display
            refresh_hardware_buttons_bars->execute(button_mask);

binary_sensor:
  ###### LEFT BUTTON BELOW DISPLAY TO TOGGLE RELAY#####
  - name: Left Button
    platform: gpio
    id: left_button
    pin:
      number: 14
      inverted: true
    on_press: &hardware_button_on_press
      - if:
          condition:
            - switch.is_on: hw_button_wakeup
          then:
            - lambda: |-
                // wake-up
                if (current_page->state == "screensaver") goto_page->execute(wakeup_page_name->state.c_str());
                timer_dim->execute();
                timer_sleep->execute();
    on_multi_click:
      - timing: &long_click-timing
          - ON for at least 0.8s
        invalid_cooldown: ${invalid_cooldown}
        then:
          - logger.log: "Left button - Long click"
          - script.execute:
              id: ha_button
              page: !lambda return current_page->state.c_str();
              component: "hw_bt_left"
              command: "long_click"
      - timing: &short_click-timing
          - ON for at most 0.8s
        invalid_cooldown: ${invalid_cooldown}
        then:
          - logger.log: "Left button - Short click"
          - if:
              condition:
                or:
                  - lambda: return (id(relay_settings) & RelaySettings::Relay1_Local);
                  - and:
                      - lambda: return (id(relay_settings) & RelaySettings::Relay1_Fallback);
                      - or:
                          - not:
                              - api.connected:
                          - not:
                              - wifi.connected:
              then:
                - switch.toggle: relay_1
          - script.execute:
              id: ha_button
              page: !lambda return current_page->state.c_str();
              component: "hw_bt_left"
              command: "short_click"

  ##### RIGHT BUTTON BELOW DISPLAY TO TOGGLE RELAY #####
  - name: Right Button
    platform: gpio
    id: right_button
    pin:
      number: 27
      inverted: true
    on_press: *hardware_button_on_press
    on_multi_click:
      - timing: *long_click-timing
        invalid_cooldown: ${invalid_cooldown}
        then:
          - logger.log: "Right button - Long click"
          - script.execute:
              id: ha_button
              page: !lambda return current_page->state.c_str();
              component: "hw_bt_right"
              command: "long_click"
      - timing: *short_click-timing
        invalid_cooldown: ${invalid_cooldown}
        then:
          - logger.log: "Right button - Short click"
          - if:
              condition:
                or:
                  - lambda: return (id(relay_settings) & RelaySettings::Relay2_Local);
                  - and:
                      - lambda: return (id(relay_settings) & RelaySettings::Relay2_Fallback);
                      - or:
                          - not:
                              - api.connected:
                          - not:
                              - wifi.connected:
              then:
                - switch.toggle: relay_2
          - script.execute:
              id: ha_button
              page: !lambda return current_page->state.c_str();
              component: "hw_bt_right"
              command: "short_click"

globals:
  ###### Buttons settings ######
  # Bit # Settings             #
  #  0  # Left Bt - Enabled    #
  #  1  # Left Bt - State      #
  #  2  # reserved             #
  #  3  # reserved             #
  #  4  # Right Bt - Enabled   #
  #  5  # Right Bt - State     #
  #  6  # reserved             #
  #  7  # reserved             #
  ##############################
  - id: buttons_settings
    type: uint8_t
    restore_value: false
    initial_value: '0'

  - id: buttons_color_on
    type: uint16_t
    restore_value: true
    initial_value: '${buttons_color_on}'

  - id: buttons_color_off
    type: uint16_t
    restore_value: true
    initial_value: '${buttons_color_off}'

  - id: buttons_bars_pages
    type: uint32_t
    restore_value: true
    initial_value: '1'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", " - HW Buttons:           %s", is_boot_step_completed(BOOT_STEP_HW_BUTTONS) ? "Completed" : "PENDING");

  - id: !extend page_changed
    then:
      - &refresh_hardware_buttons_bars_3
        script.execute:
          id: refresh_hardware_buttons_bars
          button_mask: 3
      - delay: 1s
      - *refresh_hardware_buttons_bars_3

  - id: refresh_hardware_buttons_bars
    mode: restart
    parameters:
      button_mask: uint8_t
    then:
      - lambda: |-
          #if ESPHOME_LOG_LEVEL > ESPHOME_LOG_LEVEL_DEBUG
          ESP_LOGV("script.refresh_hardware_buttons_bars", "Page:               %s", current_page->state.c_str());
          ESP_LOGV("script.refresh_hardware_buttons_bars", "Page id:            %i", get_page_id(current_page->state.c_str()));
          ESP_LOGV("script.refresh_hardware_buttons_bars", "buttons_bars_pages: %" PRIu32, id(buttons_bars_pages));
          ESP_LOGV("script.refresh_hardware_buttons_bars", "relay_settings:     %i", id(relay_settings));
          ESP_LOGV("script.refresh_hardware_buttons_bars", "button_mask:        %i", button_mask);
          #endif
          if (!id(is_uploading_tft) and ((id(buttons_bars_pages) & (1 << get_page_id(current_page->state.c_str()))) != 0)) {
            switch (int(display_mode->state)) {
              case 1:  // EU model
                if (button_mask & 1 and id(buttons_settings) & ButtonSettings::ButtonLeft_Enabled) {  // Left button
                  disp1->fill_area(48, 307, 118, 3, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(47, 308, 120, 1, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(buttons_settings) & ButtonSettings::ButtonRight_Enabled) {  // Right button
                  disp1->fill_area(289, 307, 118, 3, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(288, 308, 120, 1, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
              case 2:  // US Portrait
                if (button_mask & 1 and id(buttons_settings) & ButtonSettings::ButtonLeft_Enabled) {  // Left button
                  disp1->fill_area(17, 466, 118, 3, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(16, 467, 120, 1, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(buttons_settings) & ButtonSettings::ButtonRight_Enabled) {  // Right button
                  disp1->fill_area(184, 466, 118, 3, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(183, 467, 120, 1, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
              case 3:  // US Landscape
                if (button_mask & 1 and id(buttons_settings) & ButtonSettings::ButtonLeft_Enabled) {  // Left button
                  disp1->fill_area(467, 174, 3, 118, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(468, 173, 1, 120, (id(buttons_settings) & ButtonSettings::ButtonLeft_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(buttons_settings) & ButtonSettings::ButtonRight_Enabled) {  // Right button
                  disp1->fill_area(467, 28, 3, 118, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(468, 27, 1, 120, (id(buttons_settings) & ButtonSettings::ButtonRight_State) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
            }
          }

  - id: !extend set_component_font_color  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (component == "button_bar_color_on") id(buttons_color_on) = color;
          else if (component == "button_bar_color_off") id(buttons_color_off) = color;

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "button_left")
            update_bitwise_setting(id(buttons_settings), val, ButtonSettings::ButtonLeft_Enabled);
          else if (component == "button_right")
            update_bitwise_setting(id(buttons_settings), val, ButtonSettings::ButtonRight_Enabled);

  - id: !extend set_var_int
    then:
      - lambda: |-
          if (component == "buttons_bars_pages" and val >= 0) {
            id(buttons_bars_pages) = val;
            boot_progress->execute(BOOT_STEP_HW_BUTTONS, "HW Buttons");
          }

  - id: !extend stop_all
    then:
      - script.stop: refresh_hardware_buttons_bars

time:
  - id: !extend time_provider
    on_time:
      - seconds: 0
        then:
          - *refresh_hardware_buttons_bars_3
...
