#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - ALARM PAGE                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  BOOT_STEP_PAGE_ALARM: '1UL << 10'

api:
  id: !extend api_server
  actions:
    # Updates the alarm settings page with current state and configuration, integrating with the panel's interface.
    - action: page_alarm  # To do: Move this back to the blueprint?
      variables:
        page_title: string       # Title for the alarm settings page, displayed prominently at the top.
        state: string            # Current state of the alarm system (e.g., "armed_home", "disarmed").
        supported_features: int  # Bitmask representing the alarm system's supported features, determining available controls on the page.
        code_format: string      # Format required for the alarm code (numeric, alphanumeric).
        code_arm_required: bool  # Indicates if a code is needed to arm the system.
        entity: string           # Entity ID for the alarm system, enabling state updates and control.
        mui_alarm: string[]      # Localized text for alarm control buttons (e.g., Arm, Disarm), allowing for a multilingual interface.
      then:
        - if:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: alarm
            then:  # Update alarm page
              - text_sensor.template.publish:
                  id: detailed_entity
                  state: !lambda return entity.c_str();
              - script.execute:
                  id: alarm_update_icon
                  component: icon_state  # Alarm page - Header
                  state: !lambda return state.c_str();
              - script.execute:
                  id: set_component_text
                  component_id: page_label
                  text: !lambda |-
                    return (page_title.find("\\r") != std::string::npos) ?
                            page_title.replace(page_title.find("\\r"), 2, " ").c_str() :
                            page_title.c_str();
              # Alarm page - Code format
              - script.execute:
                  id: set_component_text
                  component_id: code_format
                  text: !lambda return code_format.c_str();
              - script.execute:
                  id: set_component_text
                  component_id: code_arm_req
                  text: !lambda |-
                    return code_arm_required ? "1" : "0";
              # Alarm page - Buttons
              - script.execute:
                  id: alarm_button_renderer
                  button_name: 'home'
                  button_text: !lambda return mui_alarm[0].c_str();
                  button_feature: 1
                  alarm_supported_features: !lambda return supported_features;
                  state_is_current: !lambda return state == "armed_home";
              #- script.execute:
              #    id: alarm_button_renderer
              #    button: away
              #    feature: 2
              #    text: !lambda return mui_alarm[1].c_str();
              #    supported_features: !lambda return supported_features;
              #    state: !lambda return state.c_str();
              #    compare_state: armed_away
              #- script.execute:
              #    id: alarm_button_renderer
              #    button: night
              #    text: !lambda return mui_alarm[2].c_str();
              #    feature: 4
              #    supported_features: !lambda return supported_features;
              #    state: !lambda return state.c_str();
              #    supported_features: !lambda return supported_features;
              #    compare_state: armed_night
              #- script.execute:
              #    id: alarm_button_renderer
              #    button: vacat
              #    text: !lambda return mui_alarm[3].c_str();
              #    feature: 32
              #    state: !lambda return state.c_str();
              #    compare_state: armed_vacation
              #    supported_features: !lambda return supported_features;
              #- script.execute:
              #    id: alarm_button_renderer
              #    button: bypass
              #    text: !lambda return mui_alarm[4].c_str();
              #    feature: 16
              #    state: !lambda return state.c_str();
              #    compare_state: armed_bypass
              #    supported_features: !lambda return supported_features;
              #- script.execute:
              #    id: alarm_button_renderer
              #    button: disarm
              #    text: !lambda return mui_alarm[5].c_str();
              #    feature: 0
              #    state: !lambda return state.c_str();
              #    compare_state: disarmed
              #    supported_features: !lambda return supported_features;

script:
  - id: alarm_button_renderer
    mode: restart
    parameters:
      button_name: string
      button_text: string
      button_feature: int
      alarm_supported_features: int
      state_is_current: bool
    then:
      - script.execute:
          id: display_wrapped_text
          page: "alarm"
          component: !lambda return constructName("bt_", button_name.c_str(), "_text").c_str();
          text_to_display: !lambda return button_text.c_str();
          line_length_limit: 10
      #- lambda: |-
      #    if (alarm_supported_features & button_feature) {
      #      disp1->set_component_pic(constructName("bt_", button_name.c_str(), "_pic").c_str(), state_is_current ? 43 : 42);
      #      // disp1->set_component_background_color(constructName("bt_", button_name, "_text").c_str(), state_is_current ? 19818 : 52857);
      #      // disp1->set_component_background_color(constructName("bt_", button_name.c_str(), "_icon").c_str(), state_is_current ? 19818 : 52857);
      #    }
      #      - script.execute:
      #          id: set_component_font_color
      #          component_id: !lambda return ("bt_" + button_name + "_text").c_str();
      #          color: !lambda |-
      #            return state_is_current ? 65535 : 0;
      #      - script.execute:
      #          id: set_component_font_color
      #          component_id: !lambda return ("bt_" + button_name + "_icon").c_str();
      #          color: !lambda |-
      #            return state_is_current ? 65535 : 0;
      #      - script.execute:
      #          id: set_component_visibility
      #          page: alarm
      #          component_id: !lambda return ("bt_" + button_name).c_str();
      #          show: !lambda return state_is_current;

  - id: alarm_control_panel_action
    mode: restart
    parameters:
      entity: string
      key: string
      code_format: string
      pin: string
    then:
      - lambda: |-
          std::string action = "";
          if (key == "home") action = "alarm_control_panel.alarm_arm_home";
          else if (key == "away") action = "alarm_control_panel.alarm_arm_away";
          else if (key == "night") action = "alarm_control_panel.alarm_arm_night";
          else if (key == "vacation") action = "alarm_control_panel.alarm_arm_vacation";
          else if (key == "bypass") action = "alarm_control_panel.alarm_arm_custom_bypass";
          else if (key == "disarm") action = "alarm_control_panel.alarm_disarm";
          if (not action.empty()) {
            HomeassistantServiceResponse resp;
            HomeassistantServiceMap resp_kv;
            resp.service = action.c_str();
            resp_kv.key = "entity_id";
            resp_kv.value = entity.c_str();
            resp.data.push_back(resp_kv);
            if (not pin.empty()) {
              resp_kv.key = "code";
              resp_kv.value = pin.c_str();
              resp.data.push_back(resp_kv);
            }
            api_server->send_homeassistant_service_call(resp);
          }

  - id: alarm_update_icon  # To do: Move to blueprint
    mode: restart
    parameters:
      component: string
      state: string
    then:
      - lambda: |-
          std::string alarm_icon = "\uEECC"; //mdi:shield-alert-outline
          int alarm_color = 65535;
          if (state == "disarmed") {
            alarm_icon = "\uE99B"; //mdi:shield-off-outline
            alarm_color = 65535;
          } else if (state == "armed_home") {
            alarm_icon = "\uECCA"; //mdi:shield-home-outline
            alarm_color = 19818;
          } else if (state == "armed_away") {
            alarm_icon = "\uECCB"; //mdi:shield-lock-outline
            alarm_color = 19818;
          } else if (state == "armed_night") {
            alarm_icon = "\uF828"; //mdi:shield-moon-outline
            alarm_color = 19818;
          } else if (state == "armed_vacation") {
            alarm_icon = "\uECC6"; //mdi:shield-airplane-outline
            alarm_color = 19818;
          } else if (state == "armed_custom_bypass") {
            alarm_icon = "\uE77F"; //mdi:shield-half-full
            alarm_color = 19818;
          } else if (state == "pending" or state == "arming") {
            alarm_icon = "\uE498"; //mdi:shield-outline
            alarm_color = 65024;
          } else if (state == "disarming") {
            alarm_icon = "\uE99B"; //mdi:shield-off-outline
            alarm_color = 65024;
          } else if (state == "triggered") {
            alarm_icon = "\uEECC"; //mdi:shield-alert-outline
            alarm_color = 63488;
          }
          set_component_text->execute(component.c_str(), alarm_icon.c_str());
          set_component_font_color->execute(component.c_str(), alarm_color);

  - id: !extend boot_progress_dump
    then:
      - script.execute:
          id: boot_progress_dump_item
          step: ${BOOT_STEP_PAGE_ALARM}
          step_name: Page Alarm

  - id: !extend boot_sequence
    then:
      - script.execute:
          id: boot_progress
          step: ${BOOT_STEP_PAGE_ALARM}
          step_name: Page Alarm

  - id: !extend event_from_display
    then:
      - if:
          condition:
            - lambda: return page == "alarm";
          then:
            - lambda: |-
                const std::string key = json["key"];
                const std::string code_format = json["code_format"];
                const std::string code_arm_req = json["code_arm_req"];
                if (code_format == "number" and (key == "disarm" or code_arm_req == "1")) {
                  goto_page->execute("keyb_num");
                  const std::string value = json["value"];
                  const std::string mui = json["mui"];
                  set_component_value->execute("keyb_num.page_id", 23);  // !lambda return get_page_id("alarm");
                  set_component_text->execute("keyb_num.domain", page.c_str());
                  set_component_text->execute("keyb_num.key", key.c_str());
                  set_component_text->execute("keyb_num.value", value.c_str());
                  set_component_text->execute("keyb_num.entity", detailed_entity->state.c_str());
                  set_component_text->execute("keyb_num.title", mui.c_str());
                } else {
                  alarm_control_panel_action->execute(detailed_entity->state.c_str(), key.c_str(), code_format.c_str(), "");
                }

  # - id: page_alarm
  #   mode: restart
  #   then:  # There's nothing here so far

  # - id: !extend page_changed
  #   then:
  #     - lambda: |-
  #         if (current_page->state == "alarm") page_alarm->execute();

  - id: !extend stop_all
    then:
      - script.stop: alarm_button_renderer
      - script.stop: alarm_control_panel_action
      - script.stop: alarm_update_icon
#      # - script.stop: page_alarm

...
