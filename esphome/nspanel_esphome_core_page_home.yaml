#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - Page Home                                                                  #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
globals:
  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", " - Page Home:            %s", is_boot_step_completed(BOOT_STEP_PAGE_HOME) ? "Completed" : "PENDING");

  - id: chip_font
    mode: restart
    parameters:
      chip_font: uint8_t
      boot: bool
    then:
      - if:
          condition:
            - or:
                - lambda: return boot;
                - lambda: return chip_font != id(home_chip_font_id);
          then:
            - lambda: id(home_chip_font_id) = chip_font;
      - script.execute:
          id: set_component_font
          component_id: home.wifi_icon
          font: !lambda return chip_font;
      - script.execute:
          id: set_component_font
          component_id: home.chip_relay1
          font: !lambda return chip_font;
      - script.execute:
          id: set_component_font
          component_id: home.chip_relay2
          font: !lambda return chip_font;
      - script.execute:
          id: set_component_font
          component_id: home.chip_climate
          font: !lambda return chip_font;
      - repeat:
          count: 7
          then:
            - delay: !lambda return (10*disp1->queue_size()+tf_uart->available());
            - lambda: |-
                disp1->send_command_printf("home.chip%02" PRIu32 ".font=%" PRIu8, iteration, chip_font);
      - script.execute:
          id: boot_progress
          step: !lambda return BOOT_STEP_PAGE_HOME;
          step_name: Page Home - Chip font

  - id: custom_buttons_font
    mode: restart
    parameters:
      custom_buttons_font: uint8_t
      boot: bool
    then:
      - lambda: |-
          if (boot or custom_buttons_font != id(home_custom_buttons_font_id)) {
            id(home_custom_buttons_font_id) = custom_buttons_font;
            delay(10*disp1->queue_size()+tf_uart->available());
            App.feed_wdt();
            yield();
            disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
            delay(10*disp1->queue_size()+tf_uart->available());
            App.feed_wdt();
            yield();
            disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
            delay(10*disp1->queue_size()+tf_uart->available());
            App.feed_wdt();
            yield();
            disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));
            for (int i = 1; i <= 7; ++i) {
              delay(10*disp1->queue_size()+tf_uart->available());
              App.feed_wdt();
              yield();
              disp1->send_command_printf("home.button%02d.font=%" PRIu8, i, id(home_custom_buttons_font_id));
            }
          }
          boot_progress->execute(BOOT_STEP_PAGE_HOME, "Page Home - Custom buttons font");

  - id: !extend boot_sequence
    then:
      - script.execute:
          id: boot_log
          category: Boot
          log_message: Set Home page elements
      - script.execute:
          id: chip_font
          chip_font: !lambda return id(home_chip_font_id);
          boot: true
      - script.execute:
          id: custom_buttons_font
          custom_buttons_font: !lambda return id(home_custom_buttons_font_id);
          boot: true

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "home") page_home->execute();

  - id: page_home
    mode: restart
    then:  # There's nothing to do so far

  - id: !extend set_var_int
    then:
      - lambda: |-
          if (component == "chip_font") chip_font->execute(val, false);
          else if (component == "custom_buttons_font") custom_buttons_font->execute(val, false);

  - id: !extend stop_all
    then:
      - script.stop: chip_font
      - script.stop: custom_buttons_font
      - script.stop: page_home
...
