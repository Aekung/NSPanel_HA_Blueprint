#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - ALARM PAGE                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
api:
  id: !extend api_server
  actions:
    # Sets up the "Home" page in ESPHome with customized settings and UI elements as defined in the project blueprint.
    - action: init_page_home
      variables:
        date_color: int[]                      # RGB color array for the date display.
        time_format: string                    # Time display format string, utilizing standard formatting symbols.
        time_color: int[]                      # RGB color array for the time display.
        meridiem: string[]                     # Optional array for AM/PM labels if included in time format.
        chip_font: int                         # Font Id for chip icons displayed on the "Home" page.
        custom_buttons_font: int               # Font Id for icons on custom buttons.
        qrcode: bool                           # Enable/disable flag for QR code button display.
        qrcode_icon: string                    # Icon codepoint for QR code button, sourced from HASwitchPlate Material Design Icons.
        qrcode_icon_color: int[]               # RGB color array for QR code button icon.
        entities_pages_icon: string            # Icon codepoint for entities page button, sourced from HASwitchPlate Material Design Icons.
        entities_pages_icon_color: int[]       # RGB color array for entities page button icon.
        utilities: bool                        # Enable/disable flag for utilities page button display.
        utilities_icon: string                 # Icon codepoint for utilities page button, sourced from HASwitchPlate Material Design Icons.
        utilities_icon_color: int[]            # RGB color array for utilities page button icon.
        outdoor_temp_font: int                 # Font Id for outdoor temperature indication on the "Home" page.
      then:
        - script.execute:
            id: boot_log
            category: Action
            log_message: init_page_home
        - if:
            condition:
              - lambda: return (!id(is_uploading_tft));
            then:
              - lambda: |-
                  // using namespace esphome::display;
                  // Localization
                  id(mui_time_format) = time_format;
                  if (meridiem.size() == 2) {
                    id(mui_meridiem)[0] = meridiem[0];
                    id(mui_meridiem)[1] = meridiem[1];
                  }

                  // Date/Time colors
                  id(home_date_color) = rgbTo565(date_color);
                  id(home_time_color) = rgbTo565(time_color);
                  disp1->set_component_font_color("home.date", id(home_date_color));
                  disp1->set_component_font_color("home.time", id(home_time_color));
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Chips icon size
                  disp1->set_component_font("home.chip_relay1", chip_font);
                  disp1->set_component_font("home.chip_relay2", chip_font);
                  disp1->set_component_font("home.chip_climate", chip_font);
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  for (int i = 1; i <= 7; ++i) {
                    disp1->send_command_printf("home.chip%02d.font=%" PRIi32, i, chip_font);
                  }
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  disp1->set_component_font("home.wifi_icon", chip_font);
                  id(home_chip_font_id) = chip_font;

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Custom buttons icon size
                  id(home_custom_buttons_font_id) = custom_buttons_font;
                  for (int i = 1; i <= 7; ++i) {
                    disp1->send_command_printf("home.button%02d.font=%" PRIu8, i, id(home_custom_buttons_font_id));
                  }
              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
                  disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
                  disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Outdoor temperature font size
                  disp1->set_component_font("home.outdoor_temp", outdoor_temp_font);

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // QRCode button
                  set_component_visibility->execute("home", "bt_qrcode", qrcode);
                  disp1->set_component_text("home.bt_qrcode", qrcode_icon.c_str());
                  disp1->set_component_font_color("home.bt_qrcode", rgbTo565(qrcode_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Entities pages button
                  disp1->set_component_text("home.bt_entities", entities_pages_icon.c_str());
                  disp1->set_component_font_color("home.bt_entities", rgbTo565(entities_pages_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  // Utilities button
                  disp1->send_command_printf("is_utilities=%i", utilities ? 1 : 0);
                  disp1->set_component_text("home.bt_utilities", utilities_icon.c_str());
                  disp1->set_component_font_color("home.bt_utilities", rgbTo565(utilities_icon_color));

              - wait_until:
                  condition:
                    - lambda: return (disp1->queue_size() < 1);
                    - lambda: return (tf_uart->available() < 1);
                  timeout: 5s
              - lambda: |-
                  blueprint_status->publish_state(int(blueprint_status->raw_state) | (1 << 1));

globals:
  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

script:
  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "home") page_home->execute();

  - id: page_home
    mode: restart
    then:  # There's nothing to do so far

  - id: !extend stop_all
    then:
      - script.stop: page_home
...
