#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - PAGE - NOTIFICATION                                                        #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
api:
  actions:
    # This action removes any displayed notifications from the screen, helping to keep the user interface clean and focused on its primary functions.
    - action: notification_clear
      then:
        - if:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: notification
            then:
              - script.execute:
                  id: goto_page
                  page: home
        - text_sensor.template.publish:
            id: notification_label
            state: ""
        - text_sensor.template.publish:
            id: notification_text
            state: ""
        - switch.turn_off: notification_unread
        - script.execute:
            id: set_component_visibility
            page: home
            component_id: bt_notific
            show: false

    # Displays a notification message on the screen, useful for alerts or informational updates.
    - action: notification_show
      variables:
        label: string    # Title or label for the notification, displayed in a prominent format.
        message: string  # Detailed message or content of the notification. Include `\r` to insert a line break, allowing for custom formatting.
      then:
        - script.execute:
            id: set_component_visibility
            page: home
            component_id: bt_notific
            show: true
        - script.execute:
            id: goto_page
            page: notification
        - script.execute: timer_reset_all
        - script.execute:
            id: set_component_text
            component_id: notification.notifi_label
            text: !lambda return label.c_str();
        - script.execute:
            id: display_wrapped_text
            page: notification
            component: notifi_text01
            text_to_display: !lambda return message.c_str();
            line_length_limit: !lambda |-
              return display_mode->state == 2 ? 23 : 32;
        - text_sensor.template.publish:
            id: notification_label
            state: !lambda return label.c_str();
        - text_sensor.template.publish:
            id: notification_text
            state: !lambda return message.c_str();
        - switch.turn_on: notification_unread
        - if:
            condition:
              - switch.is_on: notification_sound
            then:
              - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (page_id == 16) {  // Page Notification
              switch (component_id) {
                case 7:  // bt_accept
                  if (!touch_event) {  // Release
                    notification_label->publish_state("");
                    notification_text->publish_state("");
                    notification_unread->turn_off();
                    goto_page->execute("home");
                    set_component_visibility->execute("home", "bt_notific", false);
                  }
                break;
                case 8:  // bt_clear
                  if (!touch_event) {  // Release
                    notification_unread->turn_off();
                    goto_page->execute("home");
                  }
                break;
              }
            }

esphome:
  on_boot:
    - priority: 600.3
      then:
        - lambda: |-
            notification_label->publish_state("");
            notification_text->publish_state("");
            notification_unread->turn_off();

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", " - Page Notification:    %s", is_boot_step_completed(BOOT_STEP_PAGE_NOTIFICATION) ? "Completed" : "PENDING");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(BOOT_STEP_PAGE_NOTIFICATION, "Page Notification");

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "notification") page_notification->execute();

  - id: page_notification
    mode: restart
    then:
      - lambda: |-
          delay(10*disp1->queue_size()+tf_uart->available());
          disp1->set_component_text("notification.notifi_label", notification_label->state.c_str());
          delay(10*disp1->queue_size()+tf_uart->available());
          display_wrapped_text->execute("notification", "notifi_text01", notification_text->state.c_str(), display_mode->state == 2 ? 23 : 32);

  - id: !extend stop_all
    then:
      - script.stop: page_notification

switch:
  ##### Notification unread #####
  - name: Notification unread
    platform: template
    id: notification_unread
    entity_category: config
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_unread
              action: turn_on
    on_turn_off:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_unread
              action: turn_off

  ##### Notification sound #####
  - name: Notification sound
    platform: template
    id: notification_sound
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - id: notification_label
    name: Notification Label
    platform: template
    on_value:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_label
              action: new_value

  - id: notification_text
    name: Notification Text
    platform: template
    on_value:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_text
              action: new_value
...
