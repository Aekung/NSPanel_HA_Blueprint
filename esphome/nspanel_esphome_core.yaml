#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE                                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  device_name: nspanel
  name: ${device_name}
  friendly_name: ${device_name}
  ota_password: ${wifi_password}
  temp_units: "Â°C"
  invalid_cooldown: "100ms"
  bytes_per_char: "1"
  ##############################

  ##### DON'T CHANGE THIS ######
  NSPANEL_HA_BLUEPRINT_CORE: "true"
  NSPANEL_HA_BLUEPRINT_ADVANCED: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_BLE_TRACKER: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_BLUETOOTH_PROXY: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_UPLOAD_TFT: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL: "false"
  NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT: "false"
  NSPANEL_HA_BLUEPRINT_PREBUILT: "false"
  NSPANEL_HA_BLUEPRINT_PREBUILT_WALL_DISPLAY: "false"
  ##############################

packages:
  # yamllint disable rule:colons
  boot:               !include nspanel_esphome_core_boot.yaml
  datetime:           !include nspanel_esphome_core_datetime.yaml
  hw_buttons:         !include nspanel_esphome_core_hw_buttons.yaml
  hw_buzzer:          !include nspanel_esphome_core_hw_buzzer.yaml
  hw_relays:          !include nspanel_esphome_core_hw_relays.yaml
  page_alarm:         !include nspanel_esphome_core_page_alarm.yaml
  page_buttons:       !include nspanel_esphome_core_page_buttons.yaml
  page_climate:       !include nspanel_esphome_core_page_climate.yaml
  page_media_player:  !include nspanel_esphome_core_page_media_player.yaml
  page_notification:  !include nspanel_esphome_core_page_notification.yaml
  page_qrcode:        !include nspanel_esphome_core_page_qrcode.yaml
  page_utilities:     !include nspanel_esphome_core_page_utilities.yaml
  version:            !include nspanel_esphome_core_version.yaml
  # yamllint enable rule:colons

##### External components #####
external_components:
  - source:
      # type: local
      # path: packages/Blackymas/components
      type: git
      url: https://github.com/Blackymas/NSPanel_HA_Blueprint
      ref: v${version}
    components:
      - nspanel_ha_blueprint
    refresh: 30s

##### ESPHOME CONFIGURATION #####
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: NSPanel HA Blueprint
  min_version: 2024.8.0
  project:
    name: esphome.NSPanel_HA_Blueprint
  platformio_options:
    build_flags:
      - -Wno-missing-field-initializers
      - -D NSPANEL_HA_BLUEPRINT_CORE

  on_shutdown:
    - priority: 0
      then:
        - lambda: |-
            // Make it unavailable to blueprint calls
            nextion_init->publish_state(false);
            // Update Wi-Fi icon
            disp1->set_component_text("home.wifi_icon", "\uE708");
            // Update Wi-Fi icon color
            disp1->set_component_font_color("home.wifi_icon", 63488);
    - priority: 600.0
      then:
        - switch.turn_off: screen_power

esp32:
  board: esp32dev
  flash_size: 4MB
  framework:
    type: esp-idf

psram:
  id: ext_ram

##### WIFI SETUP #####
wifi:
  id: wifi_component
  power_save_mode: LIGHT
  networks:
    - id: wifi_default
      ssid: ${wifi_ssid}
      password: ${wifi_password}
  on_connect:
    then:
      - script.execute: refresh_wifi_icon
  on_disconnect:
    then:
      - script.execute: refresh_wifi_icon

##### OTA PASSWORD #####
ota:
  - id: ota_std
    platform: esphome
    password: ${ota_password}

##### Adds custom library for NSPanel HA Blueprint project
nspanel_ha_blueprint:

##### LOGGER #####
logger:
  id: logger_std
  baud_rate: 0
  level: DEBUG
  logs:
    esp32.preferences: INFO
    esp-idf: INFO
    binary_sensor: INFO
    light: INFO
    ntc: INFO
    output: INFO
    resistance: INFO
    script: INFO
    sensor: INFO
    switch: INFO
    text_sensor: INFO
    time: INFO

##### UART FOR NEXTION DISPLAY #####
uart:
  - id: tf_uart
    tx_pin: 16
    rx_pin: 17
    baud_rate: 115200

json:  # Can be replaced by web_server

##### START - API CONFIGURATION #####
api:
  id: api_server
  reboot_timeout: 60min
  on_client_connected:
    then:
      - script.execute: refresh_wifi_icon
      - script.execute: dump_config
  on_client_disconnected:
    then:
      - script.execute: refresh_wifi_icon
  actions:
    # Sends custom commands directly to the display for dynamic interactions and updates.
    - action: command
      variables:
        cmd: string  # Command string to be sent. Refer to the Nextion Instruction Set for supported commands: https://nextion.tech/instruction-set/
      then:
        - lambda: |-
            if (!id(is_uploading_tft))
              disp1->send_command(cmd.c_str());

    # Changes the foreground color of a specified component on the display.
    - action: component_color
      variables:
        id: string    # Identifier of the component to change color. Ensure this matches the component's ID in your display layout.
        color: int[]  # New color for the component, specified as an RGB array (e.g., [255, 0, 0] for red).
      then:
        - lambda: |-
            if (!id(is_uploading_tft))
              disp1->set_component_font_color(id.c_str(), rgbTo565(color));

    # Updates the text of a specified component on the display.
    - action: component_text
      variables:
        id: string   # Identifier of the component. Ensure it matches the component's ID in your display layout.
        txt: string  # New text content to be displayed. Supports both static and dynamic content.
      then:
        - lambda: |-
            if (!id(is_uploading_tft))
              disp1->set_component_text(id.c_str(), txt.c_str());

    # Updates the value of a specified component on the display.
    - action: component_val
      variables:
        id: string  # Identifier of the component to update. Must match the component's ID in the display layout.
        val: int    # New integer value to set for the component. Adjust based on the data type you're displaying.
      then:
        - lambda: |-
            if (!id(is_uploading_tft))
              disp1->set_component_value(id.c_str(), val);

    # Hides or shows a specified component on the display.
    - action: components_visibility
      variables:
        ids: string[]  # Identifier of the component to be hidden/shown. Ensure this matches the component's ID in your display layout.
        visible: bool  # Set to true to show the component, or false to hide it.
      then:
        - lambda: |-
            if (!id(is_uploading_tft)) {
              for (const std::string& component_id : ids) {
                if (!id(is_uploading_tft) and !component_id.empty()) {
                  ESP_LOGD("action.components_visibility", "vis %s,%i", component_id.c_str(), (visible ? 1 : 0));
                  set_component_visibility->execute(component_id.c_str(), visible);
                }
              }
            }

    # Displays detailed information for a specific entity.
    - action: entity_details_show
      variables:
        entity: string     # The ID of the entity for which details are shown. Supports "embedded_climate" for built-in climate control.
        back_page: string  # Specifies the page to return to. Accepts "home" or "buttonpage01" to "buttonpage04".
      then:
        - lambda: |-
            if (!id(is_uploading_tft)) {
              HomeAssistantEntity entity_id = extractHomeAssistantEntity(entity);
              if (entity == "embedded_climate") entity_id.domain = "climate";
              else if (entity_id.domain == "alarm_control_panel") entity_id.domain = "alarm";
              if (entity_id.domain != "invalid" or entity == "embedded_climate") {
                detailed_entity->publish_state(entity);
                goto_page->execute(entity_id.domain.c_str());
                disp1->send_command_printf("back_page_id=%" PRIu8, get_page_id(back_page.c_str()));
                if (entity_id.domain == "climate")
                  disp1->set_component_value("climate.embedded", (entity == "embedded_climate") ? 1 : 0);
              }
            }

    # Icon action
    - action: icon
      variables:
        id: string         # Identifier of the component. See "Screen components" in the documentation.
        icon: string       # Icon codepoint, e.g., "/uE6E8" for `mdi:lightbulb-on-outline`.
        icon_color: int[]  # RGB color array for the icon, e.g., [0, 255, 0] for green.
        visible: bool      # Set to `true` for visible or `false` for hidden.
      then:
        - lambda: |-
            if (!id(is_uploading_tft) and !id.empty()) {
              disp1->set_component_text(id.c_str(), visible ? icon.c_str() : "");
              if (icon_color.size() == 3)
                disp1->set_component_font_color(id.c_str(), rgbTo565(icon_color));
              set_component_visibility->execute(id.c_str(), visible);
            }

    - action: set_bool
      variables:
        component: string
        val: bool
      then:
        - lambda: |-
            if (component == "is_climate") id(is_climate) = val;

    - action: set_int
      variables:
        component: string
        val: int
      then:
        - lambda: |-
            if (component == "bytes_per_char") id(mui_bytes_per_char) = val;

    - action: set_string
      variables:
        component: string
        val: string
      then:
        - lambda: |-
            if (component == "timezone") set_timezone->execute(val.c_str());

    # Updates an entity to display specific values with dynamic icons, names, and color codes.
    - action: value
      variables:
        id: string          # Identifier of the entity. See "Screen components" for entity IDs.
        icon: string        # Icon codepoint (e.g., "/uE6E8" for mdi:thermometer) from HASwitchPlate Material Design Icons.
        icon_color: int[]   # RGB color array for the icon (e.g., [255, 0, 0] for red).
        name: string        # Display name for the entity (e.g., "Temperature").
        value: string       # Actual value to display (e.g., "75Â°F").
        value_color: int[]  # RGB color array for the value text (e.g., [255, 255, 0] for yellow).
      then:
        - lambda: |-
            if (!id(is_uploading_tft) and !(id.empty())) {
              using namespace esphome::display;
              if (!(icon.empty())) disp1->set_component_text((id + "_icon").c_str(), icon.c_str());
              if (icon_color.size() == 3)
                disp1->set_component_font_color((id + "_icon").c_str(), rgbTo565(icon_color));

              if (!(name.empty())) disp1->set_component_text((id + "_label").c_str(), name.c_str());
              if (!(value.empty())) disp1->set_component_text(id.c_str(), adjustDecimalSeparator(value, id(mui_decimal_separator)).c_str());
              if (value_color.size() == 3)
                disp1->set_component_font_color(id.c_str(), rgbTo565(value_color));
              if (current_page->state.find("entitypage") == 0 and !(value.empty())) {  // Adjust value's font on entities pages
                // Adjusted length starts at 0
                float adjusted_length = 0.0;

                // Iterate over each character in the string
                for (char const &c: value) {
                  // Check if character is a space or other specified exceptions
                  if (display_charset->state == 2 or std::string(" iljtIf'-,;:!.\"|()[]{}").find(c) != std::string::npos) {
                    adjusted_length += 0.5; // Count these as half
                  } else {
                    adjusted_length += 1.0; // Count all other characters as 1
                  }
                }
                // Decide which font to use based on adjusted length
                if (adjusted_length > 8.0 and adjusted_length <= 12.0) {
                  disp1->set_component_font(id.c_str(), 1);
                } else if (adjusted_length > 12.0) {
                  disp1->set_component_font(id.c_str(), 0);
                }
              }
            }

    # Wake Up action
    - action: wake_up
      variables:
        reset_timer: bool  # Determines whether to reset the sleep and dimming timers upon waking the display.
      then:
        - lambda: |-
            if (!id(is_uploading_tft)) {
              if (current_page->state == "screensaver") goto_page->execute(wakeup_page_name->state.c_str());
              if (reset_timer)
                timer_reset_all->execute();
              else {
                timer_sleep->execute();
                timer_dim->execute();
              }
            }

# yamllint enable rule:comments-indentation

##### START - DISPLAY START CONFIGURATION #####
display:
  - id: disp1
    platform: nextion
    uart_id: tf_uart

    on_page:
      - lambda: |-
          if (!id(is_uploading_tft)) {
            if (current_page->state != page_names[x] or x == 9) {
              current_page->publish_state(page_names[x]);
            }
          }

    on_touch:
      - lambda: |-
          if (!id(is_uploading_tft)) {
            timer_reset_all->execute();
            switch (page_id) {
              case 1:  // Home
                switch (component_id) {
                  case 4:  // indr_temp
                  case 27:  // indr_temp_icon
                    if (id(is_climate)) {
                      detailed_entity->publish_state((id(is_embedded_thermostat)) ? "embedded_climate" : "");
                      disp1->set_component_value("climate.embedded", id(is_embedded_thermostat) ? 1 : 0);
                      goto_page->execute("climate");
                    }
                    break;
                  case 5:  // outdoor temperature
                  case 7:  // weather
                    if (api_server->is_connected())
                      goto_page->execute("weather01");
                    break;
                }
                break;
              case 8:  // Settings
                switch (component_id) {
                  case 9:  // Reboot button
                    if (!touch_event) {  // Release
                      arch_restart();
                    }
                    break;
                }
                break;
              case 10:  // light
                switch (component_id) {
                  case 30:  // power_button
                    if (!touch_event) {  // Release
                      ha_call_action->execute("light.toggle", "", "", detailed_entity->state.c_str());
                    }
                    break;
                }
                break;
              case 22:  // fan
                switch (component_id) {
                  case 11:  // bt_oscillate
                    if (!touch_event) {  // Release
                      ha_call_action->execute("fan.oscillate", "oscillating", "toggle", detailed_entity->state.c_str());
                    }
                    break;
                  case 12:  // power_button
                    if (!touch_event) {  // Release
                      ha_call_action->execute("fan.toggle", "", "", detailed_entity->state.c_str());
                    }
                    break;
                }
                break;
            }
          }

##### START - GLOBALS CONFIGURATION #####
globals:
  - id: is_climate
    type: bool
    restore_value: true
    initial_value: 'true'

  - id: mui_bytes_per_char
    type: uint8_t
    restore_value: true
    initial_value: ${bytes_per_char}

  ##### Is uploading TFT #####
  - id: is_uploading_tft
    type: bool
    restore_value: false
    initial_value: 'false'

  ##### Add-on Climate #####
  ##### Is embedded thermostat set as main climate entity? #####
  - id: is_embedded_thermostat
    type: bool
    restore_value: true
    initial_value: 'false'

  ##### Is embedded sensor used for indoor temperature? #####
  - id: embedded_indoor_temp
    type: bool
    restore_value: true
    initial_value: 'true'

  #### Localization (MUI) ####
  - id: mui_please_confirm_global
    type: std::string
    restore_value: true
    initial_value: '"Please confirm"'
  - id: mui_unavailable_global
    type: std::string
    restore_value: true
    initial_value: '"Unavailable"'
  - id: mui_decimal_separator
    type: char
    restore_value: true
    initial_value: "'.'"

  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

  - id: page_entity_value_horizontal_alignment
    type: uint8_t
    restore_value: false
    initial_value: '1'  # Horizontal alignment:0-Left;1-Center;2-Right

binary_sensor:
  ## Delays initial info from HA to the display #####
  - name: Nextion display
    id: nextion_init
    platform: template
    device_class: connectivity
    publish_initial_state: true
    entity_category: diagnostic
    icon: mdi:tablet-dashboard
    lambda: |-
      return (!id(is_uploading_tft) and disp1->is_setup());

button:
  ###### Factory Reset button #####
  - name: Factory reset
    platform: factory_reset
    id: nspanel_factory_reset
    internal: false
    disabled_by_default: true
    icon: mdi:restart-alert

  ###### REBOOT BUTTON #####
  - name: Restart
    platform: restart
    id: restart_nspanel

  ###### Power cycle Nextion Display ######
  - name: Nextion display - Power cycle
    id: screen_power_cycle
    platform: template
    internal: false
    disabled_by_default: true
    icon: mdi:power-cycle
    entity_category: diagnostic
    on_press:
      - switch.turn_off: screen_power
      - delay: 1s
      - switch.turn_on: screen_power

light:
  # Add the display as a light in Home Assistant
  - name: Display
    id: display_light
    icon: mdi:tablet-dashboard
    platform: monochromatic
    output: display_output
    default_transition_length: 0s
    on_turn_on:
      then:
        - lambda: |-
            ESP_LOGD("light", "Display: On");
            if (current_page->state == "screensaver") disp1->goto_page(wakeup_page_name->state.c_str());
            timer_reset_all->execute();
    on_turn_off:
      then:
        - lambda: |-
            ESP_LOGD("light", "Display: Off");
            goto_page->execute("screensaver");

number:
  ##### SCREEN BRIGHTNESS #####
  - id: display_brightness
    name: Display Brightness
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    initial_value: 100
    step: 1
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            disp1->send_command_printf("brightness=%i", int(x));
            disp1->set_component_value("settings.brightslider", int(x));
            if (current_page->state != "screensaver") {
              set_brightness->execute(x);
              timer_dim->execute();
              timer_sleep->execute();
              if (current_page->state == "settings") disp1->set_component_text_printf("bright_text", "%i%%", int(x));
            }

  ##### SCREEN BRIGHTNESS DIMMED DOWN #####
  - id: display_dim_brightness
    name: Display Brightness Dimdown
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    initial_value: 25
    step: 1
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            disp1->send_command_printf("brightness_dim=%i", int(x));
            disp1->set_component_value("settings.dimslider", int(x));
            if (current_page->state != "screensaver" and current_brightness->state != x) {
              set_brightness->execute(x);
              timer_sleep->execute();
              if (current_page->state == "settings") disp1->set_component_text_printf("dim_text", "%i%%", int(x));
            }

  ##### SCREEN BRIGHTNESS SLEEP #####
  - id: display_sleep_brightness
    name: Display Brightness Sleep
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            disp1->send_command_printf("brightness_sleep=%i", int(x));
            page_screensaver->execute();

  ##### Temperature Correction #####
  - id: temperature_correction
    name: Temperature Correction
    platform: template
    entity_category: config
    unit_of_measurement: Â°C
    min_value: -10
    max_value: 10
    initial_value: 0
    step: 0.1
    mode: box
    restore_value: true
    internal: false
    optimistic: true
    on_value:
      - logger.log: Temperature correction changed.
      - delay: 1s
      - lambda: temp_nspanel->publish_state(temp_nspanel->raw_state);

  ##### Timers settings #####
  - name: Timeout Page
    platform: template
    id: timeout_page
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 15
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      - lambda: timer_page->execute();
  - name: Timeout Dimming
    platform: template
    id: timeout_dim
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 30
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      - lambda: timer_dim->execute();
  - name: Timeout Sleep
    platform: template
    id: timeout_sleep
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 60
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      - lambda: |-
          if (x == 0 and current_page->state == "screensaver") goto_page->execute(wakeup_page_name->state.c_str());
          timer_dim->execute();
          timer_sleep->execute();

output:
  # Output required by `display_light` to send the commands to Nextion
  - id: display_output
    platform: template
    type: float
    write_action:
      - lambda: |-
          ESP_LOGD("output", "state:              %f", state);
          const uint8_t current_brightness = int(round(display_light->current_values.is_on() ? (display_light->current_values.get_brightness() * 100.0f) : 0.0));
          ESP_LOGD("output", "current_brightness: %i%%", current_brightness);
          set_brightness->execute(current_brightness);

safe_mode:
  reboot_timeout: 3min
  num_attempts: 3

select:
  - id: baud_rate
    name: Baud rate
    platform: template
    options:
      - "2400"
      - "4800"
      - "9600"
      - "19200"
      - "31250"
      - "38400"
      - "57600"
      - "115200"
      - "230400"
      - "250000"
      - "256000"
      - "512000"
      - "921600"
    initial_option: "115200"
    optimistic: true
    restore_value: true
    internal: false
    entity_category: config
    disabled_by_default: true
    icon: mdi:swap-horizontal
    on_value:
      - lambda: set_baud_rate->execute(stoi(x), true);

  - id: wakeup_page_name
    name: Wake-up page
    platform: template
    options:
      - buttonpage01
      - buttonpage02
      - buttonpage03
      - buttonpage04
      - climate
      - entitypage01
      - entitypage02
      - entitypage03
      - entitypage04
      - home
      - qrcode
      - utilities
    initial_option: home
    optimistic: true
    restore_value: true
    internal: false
    entity_category: config
    icon: mdi:page-next-outline
    on_value:
      - lambda: |-
          page_screensaver->execute();

sensor:
  ##### INTERNAL TEMPERATURE SENSOR, ADC VALUE #####
  - id: ntc_source
    platform: adc
    pin: 38
    attenuation: 12db
    samples: 4
    update_interval: 10s
    filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 1

  ##### INTERNAL TEMPERATURE SENSOR, adc reading converted to resistance (calculation)#####
  - id: resistance_sensor
    platform: resistance
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  ##### INTERNAL TEMPERATURE SENSOR, resistance to temperature (calculation) #####
  - id: temp_nspanel
    name: Temperature
    platform: ntc
    sensor: resistance_sensor
    unit_of_measurement: Â°C
    internal: false
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    filters:
      - lambda: |-
          return x + temperature_correction->state;
    on_value:
      then:
        # Show panel's temperature if API or Wi-Fi are out
        - lambda: display_embedded_temp->execute();

  ###### Display Brightness GET VALUE FROM NSPanel SLIDER #####
  - id: brightslider
    name: brightness Slider
    platform: nextion
    variable_name: brightslider
    internal: true
    on_value:
      then:
        - number.set:
            id: display_brightness
            value: !lambda return int(x);
        - lambda: |-
            timer_reset_all->execute();

  ###### Display DIM Brightness GET VALUE FROM NSPanel SLIDER #####
  - id: dimslider
    name: dim brightness slider
    platform: nextion
    variable_name: dimslider
    internal: true
    on_value:
      then:
        - number.set:
            id: display_dim_brightness
            value: !lambda return int(x);
        - lambda: |-
            timer_reset_all->execute();

  ###### Display Brightness - Current value (%) #####
  - id: current_brightness
    name: Display Current brightness
    platform: nextion
    variable_name: dim
    precision: 0
    accuracy_decimals: 0
    unit_of_measurement: "%"
    icon: mdi:brightness-percent
    internal: false
    disabled_by_default: false
    update_interval: 15s

  ##### Charset (1 = International (original), 2 = CJK languages)
  - id: display_charset
    name: Display charset
    platform: nextion
    variable_name: charset
    precision: 0
    accuracy_decimals: 0
    internal: false
    icon: mdi:translate
    entity_category: diagnostic

  ##### Display mode (1 = EU, 2 = US, 3 = US Landscape)
  - id: display_mode
    name: Display mode
    platform: nextion
    variable_name: display_mode
    precision: 0
    accuracy_decimals: 0
    internal: false
    icon: mdi:phone-rotate-portrait
    entity_category: diagnostic

  ##### Wi-Fi Signal stregth
  - name: RSSI
    id: wifi_rssi
    platform: wifi_signal
    internal: false
    disabled_by_default: false
    icon: mdi:wifi
    entity_category: diagnostic

switch:
  - id: hw_button_wakeup
    name: Wake-up with hardware buttons
    platform: template
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    disabled_by_default: false

  ##### DISPLAY ALWAYS ON #####
  - name: Nextion display - Power
    platform: gpio
    id: screen_power
    entity_category: diagnostic
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    internal: true
    disabled_by_default: false
    on_turn_off:
      - lambda: |-
          nextion_init->publish_state(false);

text_sensor:
  ##### Device name - Used by bluepring to find action's names #####
  - id: device_name
    name: Device Name
    platform: template
    icon: mdi:identifier
    entity_category: diagnostic
    internal: false
    disabled_by_default: false
    lambda: |-
      return {"${name}"};
    filters:
      - lambda: |-
          #ifdef ESP_MAC_WIFI_STA
          std::string suffix = "00ERROR";  // Default suffix in case of an error
          uint8_t mac[6] = {0,0,0,0,0,0};
          if (esp_read_mac(mac, ESP_MAC_WIFI_STA) == ESP_OK) {
            suffix.clear();  // Clear the default error suffix
            for (int i = 3; i < 6; ++i) {  // Use last 3 bytes of MAC
              char hex[3];
              snprintf(hex, sizeof(hex), "%02X", mac[i]);
              suffix += hex;
            }
          }
          // Proceed with suffix (either MAC-based or default error indicator)
          const std::string raw_name = (x + "-" + suffix);
          #else
          const std::string raw_name = x;
          #endif

          std::string result;
          bool last_was_underscore = false;
          for (const char& c : raw_name) {
            if (isalnum(c)) {
              result += tolower(c);  // Add alphanumeric characters as lowercase
              last_was_underscore = false;
            } else if (!last_was_underscore) {  // Replace non-alphanumeric with '_' but avoid consecutive '_'
              result += '_';
              last_was_underscore = true;
            }
          }
          return result;

  ##### Entity Id of the entity displayed on the detailed pages
  - id: detailed_entity
    name: Detailed Entity
    platform: template
    icon: mdi:tablet-dashboard
    internal: false
    disabled_by_default: false

  ##### Current page name #####
  - id: current_page
    name: Current Page
    platform: nextion
    component_name: current_page
    icon: mdi:tablet-dashboard
    internal: false
    disabled_by_default: false
    filters:
      - lambda: |-
          x = x.c_str();
          x.shrink_to_fit();
          return x;
    on_value:
      lambda: |-
        if (!id(is_uploading_tft)) {
          page_changed->execute();
        }

  ##### NSPanel event - Execute actions from ESPHome - NO push to HA #####
  - id: disp1_local_event
    name: NSPanel local event
    platform: nextion
    nextion_id: disp1
    component_name: localevent
    internal: true
    on_value:
      then:
        - lambda: |-
            DynamicJsonDocument json(1024);
            DeserializationError error = deserializeJson(json, x.c_str());
            if (error) {
                ESP_LOGE("text_sensor.disp1_local_event", "Error parsing json: %s", x.c_str());
                ESP_LOGE("text_sensor.disp1_local_event", "Error: %s", error.c_str());
            } else {
              const std::string page = json["page"];
              const std::string event = json["event"];
              const std::string component = json["component"];
              const std::string key = json["key"];
              const std::string value = json["value"];

              esphome::api::CustomAPIDevice ha_event;
              // Send event to Home Assistant
              if (event == "short_click" or event == "long_click") {
                ha_button->execute(page.c_str(), component.c_str(), event.c_str());
              } else {  // Generic event
                ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
                  {"device_name", device_name->state.c_str()},
                  {"esphome_version", "${version}"},
                  {"type", "generic"},
                  {"page", page.c_str()},
                  {"component", component.c_str()},
                  {"event", event.c_str()},
                  {"value", value.c_str()},
                  {"entity", detailed_entity->state.c_str()}
                });
              }

              // page based actions
              if (page == "alarm") {
                const std::string code_format = json["code_format"];
                const std::string code_arm_req = json["code_arm_req"];
                const std::string title = json["mui"];
                if (code_format == "number" and (key == "disarm" or code_arm_req == "1")) {
                  goto_page->execute("keyb_num");
                  disp1->set_component_value("keyb_num.page_id", get_page_id("alarm")); //Calling from Alarm page
                  disp1->set_component_text("keyb_num.domain", page.c_str());
                  disp1->set_component_text("keyb_num.key", key.c_str());
                  disp1->set_component_text("keyb_num.value", value.c_str());
                  disp1->set_component_text("keyb_num.entity", detailed_entity->state.c_str());
                  disp1->set_component_text("keyb_num.title", title.c_str());
                  } else action_call_alarm_control_panel->execute(detailed_entity->state.c_str(), key.c_str(), code_format.c_str(), "");
              } else if (page == "climate") {
                const uint8_t embedded = json["embedded"];
                change_climate_state->execute(embedded == 1, key.c_str(), value.c_str());
              } else if (page == "cover") {
                if (key == "position") ha_call_action->execute("cover.set_cover_position", key.c_str(), value.c_str(), detailed_entity->state.c_str());
                else ha_call_action->execute(("cover." + key).c_str(), "", "", detailed_entity->state.c_str());
              } else if (page == "fan") {
                if (key == "stop" or value == "0") ha_call_action->execute("fan.turn_off", "", "", detailed_entity->state.c_str());
                else ha_call_action->execute("fan.turn_on", key.c_str(), value.c_str(), detailed_entity->state.c_str());
              } else if (page == "keyb_num") {
                const std::string base_domain = json["base_domain"];
                if (base_domain == "alarm") {
                  const std::string code_format = json["code_format"];
                  const std::string pin = json["pin"];
                  action_call_alarm_control_panel->execute(detailed_entity->state.c_str(), key.c_str(), code_format.c_str(), pin.c_str());
                }
                goto_page->execute(base_domain.empty() ? "home" : base_domain.c_str());
              } else if (page == "light") {
                if (key == "brightness_pct" or key == "color_temp") {
                  ha_call_action->execute("light.turn_on", key.c_str(), value.c_str(), detailed_entity->state.c_str());
                } else if (component == "rgb_color") {
                  JsonArray rgb_color = json["value"];
                  if (rgb_color.size() == 3) {
                    ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
                      {
                        {"device_name", device_name->state.c_str()},
                        {"esphome_version", "${version}"},
                        {"type", "action_call"},
                        {"action", "light.turn_on"},
                        {"key", "rgb_color"},
                        {"red",to_string(rgb_color[0].as<int>())},
                        {"green",to_string(rgb_color[1].as<int>())},
                        {"blue",to_string(rgb_color[2].as<int>())},
                        {"entity", detailed_entity->state.c_str()}
                      });
                  }
                }
              } else if (page == "media_player") {
                if (key == "volume_mute") {
                  ha_call_action->execute("media_player.volume_mute", "is_volume_muted", value.c_str(), detailed_entity->state.c_str());
                } else if (key == "volume_set") {
                  const float value_float = json["value"].as<float>();
                  ha_call_action->execute("media_player.volume_set", "volume_level", to_string(value_float / 100.0f), detailed_entity->state.c_str());
                } else if (!key.empty()) {
                  ha_call_action->execute((std::string("media_player.") + key.c_str()), "", "", detailed_entity->state.c_str());
                }
              }
            }

script:
  - id: display_embedded_temp
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return (disp1->queue_size() < 1);
            - lambda: return (tf_uart->available() < 1);
          timeout: 250ms
      - lambda: |-
          if (id(embedded_indoor_temp) or !wifi_component->is_connected() or !api_server->is_connected()) {
            const std::string temp_units = "${temp_units}";
            const bool temp_unit_fahrenheit = (temp_units == "Â°F" || temp_units == "F" || temp_units == "Â°f" || temp_units == "f");
            char buffer[15]; // Buffer for formatted temperature string
            if (temp_unit_fahrenheit) {
              snprintf(buffer, sizeof(buffer), "%.0f${temp_units}", (id(temp_nspanel).state * 9.0 / 5.0) + 32); // Fahrenheit with no decimal
            } else {
              snprintf(buffer, sizeof(buffer), "%.1f${temp_units}", id(temp_nspanel).state); // Celsius with one decimal
            }
            id(disp1)->set_component_text("home.indr_temp", adjustDecimalSeparator(buffer, id(mui_decimal_separator)).c_str());
          }

  - id: display_wrapped_text
    mode: queued
    max_runs: 15
    parameters:
      page: string
      component: string
      text_to_display: string
      line_length_limit: uint
    then:
      - wait_until:
          condition:
            - lambda: return (disp1->queue_size() < 1);
            - lambda: return (tf_uart->available() < 1);
          timeout: 250ms
      - lambda: |-
          int startPos = 0;
          int endPos = 0;
          std::string wrappedText = "";
          if (text_to_display.find("\\r") != std::string::npos) {
            wrappedText = text_to_display;
          } else {
            while (startPos < text_to_display.length()) {
              while (text_to_display[startPos] == ' ' and startPos < text_to_display.length()) { startPos++; }
              int endPos = startPos + (line_length_limit * id(mui_bytes_per_char));
              if (endPos >= text_to_display.length()) endPos = text_to_display.length();
              else
                {
                  while (endPos > startPos && text_to_display[endPos] != ' ') { endPos--; }
                  if (endPos == startPos) endPos = startPos + (line_length_limit * id(mui_bytes_per_char)); // Handle case of long word
                }
              wrappedText += text_to_display.substr(startPos, endPos-startPos);
              if (endPos < text_to_display.length())
                {
                  while (text_to_display[endPos] == ' ') { endPos--; }
                  if (endPos >= startPos) wrappedText += "\\r";
                }
              startPos = endPos + 1; // Skip the space
              while (text_to_display[startPos] == ' ' and startPos < text_to_display.length()) { startPos++; }
            }
          }
          ESP_LOGD("script.display_wrapped_text", "%s=%s", (std::string(page) + "." + component).c_str(), wrappedText.c_str());
          disp1->set_component_text((std::string(page) + "." + component).c_str(), wrappedText.c_str());

  - id: dump_config
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          #include <esp_heap_caps.h>
          static const char *const TAG = "nspanel_ha_blueprint";
          if (id(is_uploading_tft)) {
            ESP_LOGW(TAG, "TFT upload in progress");
          } else {
            // report Wi-Fi status
            bool wifi_connected = wifi_component->is_connected();
            if (wifi_connected) {
              float rssi = wifi_rssi->state;
              const char *rssi_status = "Unknown"; // Use const char* to avoid dynamic memory allocation
              if (rssi > -50) rssi_status = "Excellent";
              else if (rssi > -60) rssi_status = "Good";
              else if (rssi > -70) rssi_status = "Fair";
              else if (rssi > -80) rssi_status = "Weak";
              else rssi_status = "Poor";
              if (rssi > -70) ESP_LOGCONFIG(TAG, "Wi-Fi:         %s (%.0f dBm)", rssi_status, rssi);
              else if (rssi > -80) ESP_LOGW(TAG, "Wi-Fi:         %s (%.0f dBm)", rssi_status, rssi);
              else ESP_LOGE(TAG, "Wi-Fi:         %s (%.0f dBm)", rssi_status, rssi);
            }
            else {
              ESP_LOGW(TAG, "Wi-Fi:         DISCONNECTED");
            }

            // report API status
            bool api_connected = api_server->is_connected();
            if (api_connected) {
              ESP_LOGCONFIG(TAG, "API:           Connected");
            } else {
              ESP_LOGW(TAG, "API:           DISCONNECTED");
            }

            if (!wifi_connected or !api_connected) blueprint_status->publish_state(0);

            // Report blueprint version
            ESP_LOGCONFIG(TAG, "Blueprint:");
            if (blueprint_status->state > 99) {
              ESP_LOGCONFIG(TAG, "  Version:     %s", version_blueprint->state.c_str());
              ESP_LOGCONFIG(TAG, "  Init steps:  %i (%0.1f%%)", int(blueprint_status->raw_state), blueprint_status->state);
            } else {
              ESP_LOGW(TAG, "  Init steps:  %i (%0.1f%%)", int(blueprint_status->raw_state), blueprint_status->state);
              ESP_LOGW(TAG, "  State:       %s", (wifi_connected and api_connected) ? "Pending" : "DISCONNECTED");
              ESP_LOGCONFIG(TAG, "Requesting blueprint settings");
              boot_event->execute(false);
            }

            // Report ESPHome
            ESP_LOGCONFIG(TAG, "ESPHome:");
            ESP_LOGCONFIG(TAG, "  Version:     ${version}");
            ESP_LOGCONFIG(TAG, "  Compiler:    %s", ESPHOME_VERSION);
            // Report framework
            #ifdef ARDUINO
            ESP_LOGCONFIG(TAG, "  Framework:   Arduino");
            #elif defined(USE_ESP_IDF)
            ESP_LOGCONFIG(TAG, "  Framework:   ESP-IDF");
            #endif
            // Report memory
            const size_t internal_heap_size = heap_caps_get_total_size(MALLOC_CAP_INTERNAL);
            const size_t internal_heap_size_free = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
            ESP_LOGCONFIG(TAG, "  Free heap:");

            if (internal_heap_size != 0) {
              ESP_LOGCONFIG(TAG, "    Internal:  %7d bytes (%0.1f%%)", internal_heap_size_free,
                      ((float)internal_heap_size_free / internal_heap_size) * 100.0f);
            } else {
              ESP_LOGCONFIG(TAG, "    Internal:  %7d bytes", internal_heap_size_free);
            }

            #ifdef USE_PSRAM
            const size_t psram_heap_size = heap_caps_get_total_size(MALLOC_CAP_SPIRAM);
            const size_t psram_heap_size_free = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
            if (psram_heap_size != 0) {
              ESP_LOGCONFIG(TAG, "    PSRAM:     %7d bytes (%0.1f%%)", psram_heap_size_free,
                      ((float)psram_heap_size_free / psram_heap_size) * 100.0f);
            } else {
              ESP_LOGCONFIG(TAG, "    PSRAM:     %7d bytes", psram_heap_size_free);
            }
            #endif

            // Report UART
            ESP_LOGCONFIG(TAG, "UART:");
            ESP_LOGCONFIG(TAG, "  Baud rate:   %" PRIu32 " bps", tf_uart->get_baud_rate());
            ESP_LOGCONFIG(TAG, "  Queue size:  %d", tf_uart->available());

            // Report Nextion status
            nextion_init->publish_state(!id(is_uploading_tft) and nextion_init->state and disp1->is_setup());
            ESP_LOGCONFIG(TAG, "Nextion:");
            ESP_LOGCONFIG(TAG, "  Queue size:  %d", disp1->queue_size());
            if (disp1->is_setup())
              ESP_LOGCONFIG(TAG, "  Is setup:    True");
            else {
              ESP_LOGW(TAG, "  Is setup:    False");
              ESP_LOGW(TAG, "  Is detected: %s", YESNO(disp1->is_detected()));
              //exit_reparse->execute();
            }
            if (nextion_init->state) {
              ESP_LOGCONFIG(TAG, "  Init:        True");
            } else
              ESP_LOGW(TAG, "  Init:        False");
            if (version_tft->state.empty())
              ESP_LOGW(TAG, "  TFT:         UNKNOWN");
            else
              ESP_LOGCONFIG(TAG, "  TFT:         %s", version_tft->state.c_str());
            ESP_LOGCONFIG(TAG, "Packages:");
            #ifdef NSPANEL_HA_BLUEPRINT_CORE
            ESP_LOGCONFIG(TAG, "  - Core");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADVANCED
            ESP_LOGCONFIG(TAG, "  - Advanced");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_BLUETOOTH_PROXY
            ESP_LOGCONFIG(TAG, "  - Bluetooth Proxy");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_UPLOAD_TFT
            ESP_LOGCONFIG(TAG, "  - Upload TFT");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE
            ESP_LOGCONFIG(TAG, "  - Climate - Base");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
            ESP_LOGCONFIG(TAG, "  - Climate - Cool");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
            ESP_LOGCONFIG(TAG, "  - Climate - Dual");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
            ESP_LOGCONFIG(TAG, "  - Climate - Heat");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_PREBUILT
            ESP_LOGCONFIG(TAG, "  - Pre-built");
            #endif
            #ifdef NSPANEL_HA_BLUEPRINT_PREBUILT_WALL_DISPLAY
            ESP_LOGCONFIG(TAG, "  - Pre-built (Wall Display)");
            #endif
            #if defined(USE_BLUETOOTH_PROXY) || defined(USE_WEBSERVER) || defined(USE_CAPTIVE_PORTAL)
            ESP_LOGCONFIG(TAG, "Components:");
            #ifdef USE_ESP32_BLE_SERVER
            ESP_LOGCONFIG(TAG, "  - BLE server");
            #endif
            #ifdef USE_ESP32_BLE_CLIENT
            ESP_LOGCONFIG(TAG, "  - BLE tracker");
            #endif
            #ifdef USE_BLUETOOTH_PROXY
            ESP_LOGCONFIG(TAG, "  - Bluetooth proxy");
            #endif
            #ifdef USE_CAPTIVE_PORTAL
            ESP_LOGCONFIG(TAG, "  - Captive portal");
            #endif
            #ifdef USE_IMPROV
            ESP_LOGCONFIG(TAG, "  - Improv (BLE)");
            #endif
            #ifdef USE_WEBSERVER
            ESP_LOGCONFIG(TAG, "  - Web server");
            #endif
            #endif
          }

  - id: goto_page
    mode: restart
    parameters:
      page: string
    then:
      - lambda: if (current_page->state != page) disp1->goto_page(page.c_str());

  - id: ha_button
    mode: parallel
    parameters:
      page: string
      component: string
      command: string
    then:
      - lambda: |-
          if (current_page->state != "screensaver")
            timer_reset_all->execute();
          esphome::api::CustomAPIDevice ha_event;
          ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
            {
              {"device_name", device_name->state.c_str()},
              {"esphome_version", "${version}"},
              {"type", "button_click"},
              {"page", page},
              {"component", component},
              {"command", command}
            });

  - id: ha_call_action
    mode: restart
    parameters:
      action: string
      key: string
      value: string
      entity: string
    then:
      - lambda: |-
          if (!id(is_uploading_tft) and !action.empty()) {
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
              {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "action_call"},
                {"action", action},
                {"key", key},
                {"value", value},
                {"entity", entity}
              });
          }

  - id: init_hardware_climate
    mode: restart
    parameters:
      embedded_climate: bool                  # Indicates if climate control is integrated.
      embedded_climate_friendly_name: string  # Friendly name for the climate control feature.
      embedded_indoor_temperature: bool       # Enables indoor temperature display.
    then:
      - lambda: |-
          // Embedded thermostat
          id(is_embedded_thermostat) = embedded_climate;

          // Indoor temperature
          id(embedded_indoor_temp) = embedded_indoor_temperature;
          display_embedded_temp->execute();

  - id: page_blank
    mode: restart
    then:
      - lambda: |-
          ESP_LOGW("script.page_blank", "Construct blank page");
          disp1->set_component_text("esp_version", "FW: ${version}");  // ESPHome version
          #ifdef ARDUINO
          disp1->set_component_text("framework", "Arduino");
          #elif defined(USE_ESP_IDF)
          disp1->set_component_text("framework", "ESP-IDF");
          #endif
          disp1->send_command("tm_esphome.en=0");

  - id: page_changed
    mode: restart
    then:
      - lambda: |-
          // Report new page to logs
          ESP_LOGD("script.page_changed", "New page: %s", current_page->state.c_str());
          // Reset globals
          if (current_page->state != "alarm" &&
              current_page->state != "climate" &&
              current_page->state != "cover" &&
              current_page->state != "fan" &&
              current_page->state != "light" &&
              current_page->state != "media_player" &&
              current_page->state != "confirm" &&
              current_page->state != "keyb_num") {
              detailed_entity->publish_state("");
              disp1->send_command("back_page_id=1");
          }

          if (!detailed_entity->state.empty())
            ESP_LOGD("script.page_changed", "Entity shown: %s", detailed_entity->state.c_str());

          // Reset timers
          if (current_page->state != "screensaver") timer_reset_all->execute();

          // Report new page to Home Assistant
          esphome::api::CustomAPIDevice ha_event;
          ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
            {
              {"device_name", device_name->state.c_str()},
              {"esphome_version", "${version}"},
              {"type", "page_changed"},
              {"page", current_page->state.c_str()},
              {"entity", detailed_entity->state.c_str()}
            });

          // Update the display light entity
          if (current_page->state == "screensaver" and display_light->current_values.is_on()) {
            ESP_LOGV("script.page_changed(custom)", "Turning off light.");
            auto call = display_light->turn_off();
            call.perform();
          } else if (current_page->state != "screensaver" and (not display_light->current_values.is_on())) {
            ESP_LOGV("script.page_changed(custom)", "Turning on light.");
            auto call = display_light->turn_on();
            call.perform();
          }

          // Call page constructor
          if (current_page->state == "blank") page_blank->execute();
          else if (current_page->state == "confirm") page_confirm->execute();
          else if (current_page->state == "cover") page_cover->execute();
          else if (current_page->state == "entitypage01") page_entitypage01->execute();
          else if (current_page->state == "entitypage02") page_entitypage02->execute();
          else if (current_page->state == "entitypage03") page_entitypage03->execute();
          else if (current_page->state == "entitypage04") page_entitypage04->execute();
          else if (current_page->state == "fan") page_fan->execute();
          else if (current_page->state == "home") page_home->execute();
          else if (current_page->state == "keyb_num") page_keyb_num->execute();
          else if (current_page->state == "light") page_light->execute();
          else if (current_page->state == "qrcode") page_qrcode->execute();
          else if (current_page->state == "screensaver") page_screensaver->execute();
          else if (current_page->state == "settings") page_settings->execute();
          else if (current_page->state == "weather01") page_weather01->execute();
          else if (current_page->state == "weather02") page_weather02->execute();
          else if (current_page->state == "weather03") page_weather03->execute();
          else if (current_page->state == "weather04") page_weather04->execute();
          else if (current_page->state == "weather05") page_weather05->execute();

  - id: page_confirm
    mode: restart
    then:
      - lambda: |-
          if (!id(is_uploading_tft)) display_wrapped_text->execute("confirm", "title", id(mui_please_confirm_global).c_str(), 15);

  - id: page_cover
    mode: restart
    then:  # There's nothing here so far

  - id: page_entitypage
    mode: restart
    parameters:
      page_number: uint
    then:
      - lambda: |-
          if (current_page->state.find("entitypage") == 0) {
            // Set value alignment
            if (id(page_entity_value_horizontal_alignment) != 1) {
              for (int i = 1; i <= 8; ++i) {
                disp1->send_command_printf("value%02d.xcen=%" PRIu8, i, id(page_entity_value_horizontal_alignment));
              }
            }
          }
  - id: page_entitypage01
    mode: restart
    then:
      - script.execute:
          id: page_entitypage
          page_number: 1
  - id: page_entitypage02
    mode: restart
    then:
      - script.execute:
          id: page_entitypage
          page_number: 2
  - id: page_entitypage03
    mode: restart
    then:
      - script.execute:
          id: page_entitypage
          page_number: 3
  - id: page_entitypage04
    mode: restart
    then:
      - script.execute:
          id: page_entitypage
          page_number: 4

  - id: page_fan
    mode: restart
    then:  # There's nothing here so far

  - id: page_home
    mode: restart
    then:
      - lambda:
          refresh_wifi_icon->execute();

  - id: page_keyb_num
    mode: restart
    then:  # There's nothing here so far

  - id: page_light
    mode: restart
    then:  # There's nothing here so far

  - id: page_screensaver
    mode: restart
    then:
      - lambda: |-
          if (current_page->state == "screensaver" and !id(is_uploading_tft)) {
            disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));
            if (id(screensaver_display_time)) {
              disp1->set_component_font("screensaver.text", id(screensaver_display_time_font));
              disp1->set_component_font_color("screensaver.text", id(screensaver_display_time_color));
              set_component_visibility->execute("screensaver.text", true);
              refresh_datetime->execute();
            }
            set_brightness->execute(display_sleep_brightness->state);
          }

  - id: page_settings
    mode: restart
    then:
      - lambda: |-
          set_component_visibility->execute("page_settings.lbl_sleep", false);
          set_component_visibility->execute("page_settings.bt_sleep", false);

  - id: page_weather
    mode: restart
    parameters:
      page_number: uint
    then:  # There's nothing here so far
  - id: page_weather01
    mode: restart
    then:
      - script.execute:
          id: page_weather
          page_number: 1
  - id: page_weather02
    mode: restart
    then:
      - script.execute:
          id: page_weather
          page_number: 2
  - id: page_weather03
    mode: restart
    then:
      - script.execute:
          id: page_weather
          page_number: 3
  - id: page_weather04
    mode: restart
    then:
      - script.execute:
          id: page_weather
          page_number: 4
  - id: page_weather05
    mode: restart
    then:
      - script.execute:
          id: page_weather
          page_number: 5

  - id: refresh_wifi_icon
    mode: restart
    then:
      - lambda: |-
          if (!id(is_uploading_tft)) {
            disp1->send_command_printf("api=%i", (wifi_component->is_connected() and api_server->is_connected() and blueprint_status->state > 99) ? 1 : 0);
            // Update Wi-Fi icon color
            disp1->set_component_font_color("home.wifi_icon",
                                            (wifi_component->is_connected() and api_server->is_connected() and blueprint_status->state > 99) ?
                                            (wifi_rssi->state > -70 ? 33808 : 64992) :
                                            63488);
            // Update Wi-Fi icon
            disp1->set_component_text("home.wifi_icon",
                                      wifi_component->is_connected() ?
                                        (api_server->is_connected() ?
                                          ((blueprint_status->state > 99) ? "\uE5A8" :  // mdi:wifi - All right!
                                          "\uE7CF") :                                   // mdi:home-assistant - Blueprint is out
                                        "\uF256") :                                     // mdi:api-off
                                      "\uE5A9");                                        // mdi:wifi-off
          }

  - id: set_baud_rate
    mode: restart
    parameters:
      baud_rate: uint32_t
      definitive: bool
    then:
      - if:
          condition:
            - lambda: return (tf_uart->get_baud_rate() != baud_rate);
          then:
            - lambda: |-
                ESP_LOGD("script.set_baud_rate", "Baud rate changing from %" PRIu32 " to %" PRIu32 " bps", tf_uart->get_baud_rate(), baud_rate);
                ESP_LOGD("script.set_baud_rate", "Flush UART");
            - wait_until:
                condition:
                  - lambda: return (tf_uart->available() < 1);
                timeout: 5s
            - lambda: |-
                ESP_LOGD("script.set_baud_rate", "Sending instruction '%s=%" PRIu32 "' to Nextion", definitive ? "bauds" : "baud", baud_rate);
                disp1->send_command_printf("%s=%" PRIu32, definitive ? "bauds" : "baud", baud_rate);
                ESP_LOGD("script.set_baud_rate", "Flush UART");
            - wait_until:
                condition:
                  - lambda: return (tf_uart->available() < 1);
                timeout: 5s
            - lambda: |-
                ESP_LOGD("script.set_baud_rate", "Set ESPHome new baud rate to %" PRIu32 " bps", baud_rate);
                tf_uart->set_baud_rate(baud_rate);
                tf_uart->load_settings();
                ESP_LOGD("script.set_baud_rate", "Current baud rate: %" PRIu32 " bps", tf_uart->get_baud_rate());

  - id: set_brightness
    mode: restart
    parameters:
      brightness: float
    then:
      - lambda: |-
          if (!id(is_uploading_tft)) {
            disp1->set_backlight_brightness(brightness / 100.0f);
            current_brightness->update();
            uint8_t current_light_brightness = int(round(display_light->current_values.is_on() ? (display_light->current_values.get_brightness() * 100.0f) : 0.0));
            ESP_LOGV("script.set_brightness(custom)", "current_light_brightness: %i%%", current_light_brightness);
            if (brightness != current_light_brightness) {
              if (current_page->state != "screensaver" and brightness > 0) {
                ESP_LOGV("script.set_brightness(custom)", "Adjusting light brightness to %.3f%%", brightness / 100.0f);
                auto call = display_light->turn_on();
                call.set_brightness(brightness / 100.0f);
                call.perform();
              } else if (display_light->current_values.is_on()) {
                ESP_LOGV("script.set_brightness(custom)", "Turning off light.");
                auto call = display_light->turn_off();
                call.set_brightness(0);
                call.perform();
              }
            }
          }

  - id: set_component_visibility
    mode: queued
    max_runs: 15
    parameters:
      component_id: string
      show: bool
    then:
      - wait_until:
          condition:
            - lambda: return (disp1->queue_size() < 1);
            - lambda: return (tf_uart->available() < 1);
          timeout: 250ms
      - lambda: |-
          NextionComponent component = extractNextionComponent(component_id, current_page->state);
          ESP_LOGD("script.set_component_visibility", "vis %s,%i", component.component_id, show ? 1 : 0);
          if (component.is_current_page) disp1->send_command_printf("vis %s,%i", component.component_id, show ? 1 : 0);

  - id: stop_all
    mode: restart
    then:
      - lambda: |-
          check_versions->stop();
          display_embedded_temp->stop();
          display_wrapped_text->stop();
          dump_config->stop();
          ha_button->stop();
          ha_call_action->stop();
          init_hardware_climate->stop();
          page_blank->stop();
          page_changed->stop();
          page_confirm->stop();
          page_cover->stop();
          page_entitypage01->stop();
          page_entitypage02->stop();
          page_entitypage03->stop();
          page_entitypage04->stop();
          page_entitypage->stop();
          page_fan->stop();
          page_home->stop();
          page_keyb_num->stop();
          page_light->stop();
          page_screensaver->stop();
          page_settings->stop();
          page_weather01->stop();
          page_weather02->stop();
          page_weather03->stop();
          page_weather04->stop();
          page_weather05->stop();
          page_weather->stop();
          refresh_wifi_icon->stop();
          set_baud_rate->stop();
          set_brightness->stop();
          timer_dim->stop();
          timer_page->stop();
          timer_reset_all->stop();
          timer_sleep->stop();
          update_climate_icon->stop();
          update_tft_info->stop();

  ###### Timers ######
  - id: timer_reset_all  # Global timer reset - Triggered with a touch on the screen
    mode: restart
    then:
      - lambda: |-
          timer_page->execute();
          timer_dim->execute();
          timer_sleep->execute();
  - id: timer_page       # Handles the fallback to home page after a timeout
    mode: restart
    then:
      - if:
          condition:
            - lambda: |-
                return (timeout_page->state >= 1 and
                        current_page->state != "boot" and
                        current_page->state != "confirm" and
                        current_page->state != "home" and
                        current_page->state != "notification" and
                        current_page->state != "screensaver");
          then:
            - delay: !lambda return (int(timeout_page->state) *1000);
            - lambda: |-
                #if ESPHOME_LOG_LEVEL > ESPHOME_LOG_LEVEL_DEBUG
                ESP_LOGV("script.timer_page", "Timed out on page: %s", current_page->state.c_str());
                #endif
                if (timeout_page->state >= 1 and
                    current_page->state != "boot" and
                    current_page->state != "confirm" and
                    current_page->state != "home" and
                    current_page->state != "notification" and
                    current_page->state != "screensaver")
                  {
                    ESP_LOGD("script.timer_page", "Fallback to page Home");
                    goto_page->execute("home");
                  }
  - id: timer_dim        # Handles the brightness dimming after a timeout
    mode: restart
    then:
      - lambda: |-
          if (current_brightness->state <= display_dim_brightness->state
              and current_page->state != "screensaver"
              and current_page->state != "boot") {
            ESP_LOGD("script.timer_dim", "Waking up on page: %s", current_page->state.c_str());
            set_brightness->execute(display_brightness->state);
          }
      - if:
          condition:
            - lambda: return (timeout_dim->state >= 1);
          then:
            - delay: !lambda return (int(timeout_dim->state) *1000);
            - lambda: |-
                if (current_page->state != "screensaver" and
                    current_page->state != "boot" and
                    timeout_dim->state >= 1) {
                  set_brightness->execute(display_dim_brightness->state);
                }
  - id: timer_sleep  # Handles the sleep (go to screensaver page) after a timeout
    mode: restart
    then:
      - if:
          condition:
            - lambda: |-
                return (timeout_sleep->state >= 1 and current_page->state != "screensaver" and current_page->state != "boot");
          then:
            - delay: !lambda return (int(timeout_sleep->state) *1000);
            - lambda: |-
                if (current_page->state != "screensaver" and
                    current_page->state != "boot" and
                    timeout_sleep->state >= 1) {
                  ESP_LOGD("script.timer_sleep", "Going to sleep from page %s", current_page->state.c_str());
                  goto_page->execute("screensaver");
                  set_brightness->execute(display_sleep_brightness->state);
                }

  - id: update_tft_info
    mode: restart
    then:
      - while:
          condition:
            - lambda: return (isnan(display_charset->state) or isnan(display_mode->state) or version_tft->state.empty());
          then:
            - lambda: |-
                ESP_LOGD("script.update_tft_info", "Updating TFT info");
                if (isnan(display_charset->state)) display_charset->update();
                if (isnan(display_mode->state)) display_mode->update();
                if (version_tft->state.empty()) version_tft->update();
            - wait_until:
                condition:
                  - lambda: return (!isnan(display_charset->state) and !isnan(display_mode->state) and !(version_tft->state.empty()));
                timeout: 10s
...
